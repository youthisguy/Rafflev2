{"id":"56b322df6e43580c0ff233e9f48411e8","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"},"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/Lottery.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.7;\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport {ConfirmedOwner} from \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\";\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\n\nerror Lottery__NotEnoughETHEntered();\nerror Lottery__TransferFailed();\nerror Lottery__NotOpen();\nerror Lottery_UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\n\n/** @title A sample Raffle Contract\n * @author Youthisguy\n * @notice This contract is for creating an untamparable decentralized smart contract\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\n */\n\nabstract contract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\n    /* Type declarations */\n    enum RaffleState {\n        OPEN,\n        CALCULATING\n    }\n\n    /* State variables */\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint16 private constant NUM_WORDS = 3;\n\n    /* Lottery Variables */\n    address private s_recentWinner;\n    RaffleState private s_raffleState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_interval;\n\n    /* Events */\n    event LotteryEnter(address indexed player);\n    event RaffleEnter(address indexed participant);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed winner);\n\n    /* Functions */\n    constructor(\n        address vrfCordinatorV2,\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval\n    ) VRFConsumerBaseV2(vrfCordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_raffleState = RaffleState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_interval = interval;\n    }\n\n    function enterRaffle() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Lottery__NotEnoughETHEntered();\n        }\n        if (s_raffleState != RaffleState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        s_players.push(payable(msg.sender));\n        emit RaffleEnter(msg.sender);\n    }\n\n    /**\n     * @dev this is the function that the Chainlink keeper nodes call\n     * they look for the upkeepNeeded to return true\n     * the following should be true in order to return true\n     * 1. Our time interval should have passed\n     * 2. The lottery should have atleast one player, and some ETH\n     * 3. Our subscription should have atleast some LINK\n     * 4. The lottery should be in an \"open\" state\n     */\n\n    function checkUpkeep(\n        bytes memory /* checkData */\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasPlayers = (s_players.length > 0);\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    function performUpkeep(bytes calldata /* PerformData */) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(abi.encodePacked(\"\"));\n        if (!upkeepNeeded) {\n            revert Lottery_UpkeepNotNeeded(\n                address(this).balance,\n                s_players.length,\n                uint256(s_raffleState)\n            );\n        }\n        s_raffleState = RaffleState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    function fulfillRandomWords(\n        uint256 /*requestId*/,\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        address payable recentWinner = s_players[indexOfWinner];\n        s_recentWinner = recentWinner;\n        s_raffleState = RaffleState.OPEN;\n        s_players = new address payable[](0);\n        s_lastTimeStamp = block.timestamp;\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Lottery__TransferFailed();\n        }\n        emit WinnerPicked(recentWinner);\n    }\n\n    /* View Pure functions */\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getRaffleState() public view returns (RaffleState) { \n        return s_raffleState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n  --> contracts/Lottery.sol:91:56:\n   |\n91 |     ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\n   |                                                        ^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":3386,"file":"contracts/Lottery.sol","start":3374},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol","exportedSymbols":{"AutomationBase":[37]},"id":38,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationBase","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":37,"linearizedBaseContracts":[37],"name":"AutomationBase","nameLocation":"66:14:0","nodeType":"ContractDefinition","nodes":[{"errorSelector":"b60ac5db","id":3,"name":"OnlySimulatedBackend","nameLocation":"91:20:0","nodeType":"ErrorDefinition","parameters":{"id":2,"nodeType":"ParameterList","parameters":[],"src":"111:2:0"},"src":"85:29:0"},{"body":{"id":27,"nodeType":"Block","src":"291:200:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":13,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"350:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":8,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"353:6:0","memberName":"origin","nodeType":"MemberAccess","src":"350:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":11,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"371:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"363:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:0","typeDescriptions":{}}},"id":12,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"363:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"350:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":14,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"377:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":15,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"380:6:0","memberName":"origin","nodeType":"MemberAccess","src":"377:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"307831313131313131313131313131313131313131313131313131313131313131313131313131313131","id":18,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"398:42:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x1111111111111111111111111111111111111111"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"390:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":16,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:0","typeDescriptions":{}}},"id":19,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"390:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"377:64:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"350:91:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":26,"nodeType":"IfStatement","src":"346:141:0","trueBody":{"id":25,"nodeType":"Block","src":"443:44:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"OnlySimulatedBackend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"458:20:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"458:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"RevertStatement","src":"451:29:0"}]}}]},"documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"118:127:0","text":" @notice method that allows it to be simulated via eth_call by checking that\n the sender is the zero address."},"id":28,"implemented":true,"kind":"function","modifiers":[],"name":"_preventExecution","nameLocation":"257:17:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[],"src":"274:2:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"291:0:0"},"scope":37,"src":"248:243:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":35,"nodeType":"Block","src":"652:37:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":31,"name":"_preventExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"658:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"658:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":33,"nodeType":"ExpressionStatement","src":"658:19:0"},{"id":34,"nodeType":"PlaceholderStatement","src":"683:1:0"}]},"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"495:129:0","text":" @notice modifier that allows it to be simulated via eth_call by checking\n that the sender is the zero address."},"id":36,"name":"cannotExecute","nameLocation":"636:13:0","nodeType":"ModifierDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"649:2:0"},"src":"627:62:0","virtual":false,"visibility":"internal"}],"scope":38,"src":"57:634:0","usedErrors":[3],"usedEvents":[]}],"src":"32:660:0"},"id":0},"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","exportedSymbols":{"AutomationBase":[37],"AutomationCompatible":[48],"AutomationCompatibleInterface":[67]},"id":49,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":39,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol","file":"./AutomationBase.sol","id":41,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":49,"sourceUnit":38,"src":"57:52:1","symbolAliases":[{"foreign":{"id":40,"name":"AutomationBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"65:14:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","file":"./interfaces/AutomationCompatibleInterface.sol","id":43,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":49,"sourceUnit":68,"src":"110:93:1","symbolAliases":[{"foreign":{"id":42,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"118:29:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":44,"name":"AutomationBase","nameLocations":["247:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":37,"src":"247:14:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"247:14:1"},{"baseName":{"id":46,"name":"AutomationCompatibleInterface","nameLocations":["263:29:1"],"nodeType":"IdentifierPath","referencedDeclaration":67,"src":"263:29:1"},"id":47,"nodeType":"InheritanceSpecifier","src":"263:29:1"}],"canonicalName":"AutomationCompatible","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":48,"linearizedBaseContracts":[48,67,37],"name":"AutomationCompatible","nameLocation":"223:20:1","nodeType":"ContractDefinition","nodes":[],"scope":49,"src":"205:90:1","usedErrors":[3],"usedEvents":[]}],"src":"32:264:1"},"id":1},"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[67]},"id":68,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":50,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationCompatibleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":67,"linearizedBaseContracts":[67],"name":"AutomationCompatibleInterface","nameLocation":"67:29:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"101:985:2","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":60,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:2","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:2","nodeType":"VariableDeclaration","scope":60,"src":"1110:24:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":52,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:2"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:2","nodeType":"VariableDeclaration","scope":60,"src":"1154:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":55,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"performData","nameLocation":"1186:11:2","nodeType":"VariableDeclaration","scope":60,"src":"1173:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":57,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:2"},"scope":67,"src":"1089:110:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"1203:1003:2","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":66,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:2","nodeType":"FunctionDefinition","parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"performData","nameLocation":"2247:11:2","nodeType":"VariableDeclaration","scope":66,"src":"2232:26:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":62,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:2"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[],"src":"2268:0:2"},"scope":67,"src":"2209:60:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":68,"src":"57:2214:2","usedErrors":[],"usedEvents":[]}],"src":"32:2240:2"},"id":2},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","exportedSymbols":{"ConfirmedOwner":[88],"ConfirmedOwnerWithProposal":[251]},"id":89,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":69,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","file":"./ConfirmedOwnerWithProposal.sol","id":71,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":89,"sourceUnit":252,"src":"57:76:3","symbolAliases":[{"foreign":{"id":70,"name":"ConfirmedOwnerWithProposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"65:26:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":73,"name":"ConfirmedOwnerWithProposal","nameLocations":["267:26:3"],"nodeType":"IdentifierPath","referencedDeclaration":251,"src":"267:26:3"},"id":74,"nodeType":"InheritanceSpecifier","src":"267:26:3"}],"canonicalName":"ConfirmedOwner","contractDependencies":[],"contractKind":"contract","documentation":{"id":72,"nodeType":"StructuredDocumentation","src":"135:105:3","text":"@title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":88,"linearizedBaseContracts":[88,251,267],"name":"ConfirmedOwner","nameLocation":"249:14:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":86,"nodeType":"Block","src":"377:2:3","statements":[]},"id":87,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":79,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"355:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":82,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"373:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":81,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":80,"name":"address","nodeType":"ElementaryTypeName","src":"365:7:3","typeDescriptions":{}}},"id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":84,"kind":"baseConstructorSpecifier","modifierName":{"id":78,"name":"ConfirmedOwnerWithProposal","nameLocations":["328:26:3"],"nodeType":"IdentifierPath","referencedDeclaration":251,"src":"328:26:3"},"nodeType":"ModifierInvocation","src":"328:48:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"newOwner","nameLocation":"318:8:3","nodeType":"VariableDeclaration","scope":87,"src":"310:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"310:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"309:18:3"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"377:0:3"},"scope":88,"src":"298:81:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":89,"src":"240:141:3","usedErrors":[],"usedEvents":[105,111]}],"src":"32:350:3"},"id":3},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","exportedSymbols":{"ConfirmedOwnerWithProposal":[251],"IOwnable":[267]},"id":252,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":90,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:4"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","file":"../interfaces/IOwnable.sol","id":92,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":252,"sourceUnit":268,"src":"57:52:4","symbolAliases":[{"foreign":{"id":91,"name":"IOwnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"65:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":94,"name":"IOwnable","nameLocations":["255:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":267,"src":"255:8:4"},"id":95,"nodeType":"InheritanceSpecifier","src":"255:8:4"}],"canonicalName":"ConfirmedOwnerWithProposal","contractDependencies":[],"contractKind":"contract","documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"111:105:4","text":"@title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":251,"linearizedBaseContracts":[251,267],"name":"ConfirmedOwnerWithProposal","nameLocation":"225:26:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":97,"mutability":"mutable","name":"s_owner","nameLocation":"284:7:4","nodeType":"VariableDeclaration","scope":251,"src":"268:23:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"268:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":99,"mutability":"mutable","name":"s_pendingOwner","nameLocation":"311:14:4","nodeType":"VariableDeclaration","scope":251,"src":"295:30:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"295:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"ed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278","id":105,"name":"OwnershipTransferRequested","nameLocation":"336:26:4","nodeType":"EventDefinition","parameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"379:4:4","nodeType":"VariableDeclaration","scope":105,"src":"363:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"401:2:4","nodeType":"VariableDeclaration","scope":105,"src":"385:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"385:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"362:42:4"},"src":"330:75:4"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":111,"name":"OwnershipTransferred","nameLocation":"414:20:4","nodeType":"EventDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"451:4:4","nodeType":"VariableDeclaration","scope":111,"src":"435:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":106,"name":"address","nodeType":"ElementaryTypeName","src":"435:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":109,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"473:2:4","nodeType":"VariableDeclaration","scope":111,"src":"457:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"434:42:4"},"src":"408:69:4"},{"body":{"id":144,"nodeType":"Block","src":"533:230:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":119,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"598:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"618:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"610:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:4","typeDescriptions":{}}},"id":123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"610:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"598:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"622:26:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""},"value":"Cannot set owner to zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""}],"id":118,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"590:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"590:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"590:59:4"},{"expression":{"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":128,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"656:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":129,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"666:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"656:18:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":131,"nodeType":"ExpressionStatement","src":"656:18:4"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":132,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"684:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"708:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"700:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"700:7:4","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"700:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"684:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":143,"nodeType":"IfStatement","src":"680:79:4","trueBody":{"id":142,"nodeType":"Block","src":"712:47:4","statements":[{"expression":{"arguments":[{"id":139,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"739:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":138,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"720:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"720:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":141,"nodeType":"ExpressionStatement","src":"720:32:4"}]}}]},"id":145,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"newOwner","nameLocation":"501:8:4","nodeType":"VariableDeclaration","scope":145,"src":"493:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"pendingOwner","nameLocation":"519:12:4","nodeType":"VariableDeclaration","scope":145,"src":"511:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"492:40:4"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"533:0:4"},"scope":251,"src":"481:282:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[263],"body":{"id":158,"nodeType":"Block","src":"912:33:4","statements":[{"expression":{"arguments":[{"id":155,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"937:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":154,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"918:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":157,"nodeType":"ExpressionStatement","src":"918:22:4"}]},"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"767:77:4","text":"@notice Allows an owner to begin transferring ownership to a new address."},"functionSelector":"f2fde38b","id":159,"implemented":true,"kind":"function","modifiers":[{"id":152,"kind":"modifierInvocation","modifierName":{"id":151,"name":"onlyOwner","nameLocations":["902:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":250,"src":"902:9:4"},"nodeType":"ModifierInvocation","src":"902:9:4"}],"name":"transferOwnership","nameLocation":"856:17:4","nodeType":"FunctionDefinition","overrides":{"id":150,"nodeType":"OverrideSpecifier","overrides":[],"src":"893:8:4"},"parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"to","nameLocation":"882:2:4","nodeType":"VariableDeclaration","scope":159,"src":"874:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"873:12:4"},"returnParameters":{"id":153,"nodeType":"ParameterList","parameters":[],"src":"912:0:4"},"scope":251,"src":"847:98:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[266],"body":{"id":194,"nodeType":"Block","src":"1071:271:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":165,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1136:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1140:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1136:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":167,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"1150:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1136:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1166:24:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""},"value":"Must be proposed owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""}],"id":164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1128:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1128:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":171,"nodeType":"ExpressionStatement","src":"1128:63:4"},{"assignments":[173],"declarations":[{"constant":false,"id":173,"mutability":"mutable","name":"oldOwner","nameLocation":"1206:8:4","nodeType":"VariableDeclaration","scope":194,"src":"1198:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":172,"name":"address","nodeType":"ElementaryTypeName","src":"1198:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":175,"initialValue":{"id":174,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"1217:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1198:26:4"},{"expression":{"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":176,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"1230:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":177,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1240:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1244:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1240:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1230:20:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":180,"nodeType":"ExpressionStatement","src":"1230:20:4"},{"expression":{"id":186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":181,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"1256:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1281:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1273:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"1273:7:4","typeDescriptions":{}}},"id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1273:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1256:27:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":187,"nodeType":"ExpressionStatement","src":"1256:27:4"},{"eventCall":{"arguments":[{"id":189,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"1316:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":190,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1326:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1330:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1326:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":188,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1295:20:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1295:42:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":193,"nodeType":"EmitStatement","src":"1290:47:4"}]},"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"949:74:4","text":"@notice Allows an ownership transfer to be completed by the recipient."},"functionSelector":"79ba5097","id":195,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1035:15:4","nodeType":"FunctionDefinition","overrides":{"id":162,"nodeType":"OverrideSpecifier","overrides":[],"src":"1062:8:4"},"parameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"1050:2:4"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"1071:0:4"},"scope":251,"src":"1026:316:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[258],"body":{"id":204,"nodeType":"Block","src":"1438:25:4","statements":[{"expression":{"id":202,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"1451:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":201,"id":203,"nodeType":"Return","src":"1444:14:4"}]},"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"1346:33:4","text":"@notice Get the current owner"},"functionSelector":"8da5cb5b","id":205,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1391:5:4","nodeType":"FunctionDefinition","overrides":{"id":198,"nodeType":"OverrideSpecifier","overrides":[],"src":"1411:8:4"},"parameters":{"id":197,"nodeType":"ParameterList","parameters":[],"src":"1396:2:4"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":205,"src":"1429:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"1429:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1428:9:4"},"scope":251,"src":"1382:81:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":228,"nodeType":"Block","src":"1584:191:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":212,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"1649:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":213,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1655:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1659:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1655:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1667:25:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""},"value":"Cannot transfer to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""}],"id":211,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1641:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":218,"nodeType":"ExpressionStatement","src":"1641:52:4"},{"expression":{"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":219,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"1700:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":220,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"1717:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1700:19:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":222,"nodeType":"ExpressionStatement","src":"1700:19:4"},{"eventCall":{"arguments":[{"id":224,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"1758:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":225,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"1767:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":223,"name":"OwnershipTransferRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"1731:26:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1731:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":227,"nodeType":"EmitStatement","src":"1726:44:4"}]},"documentation":{"id":206,"nodeType":"StructuredDocumentation","src":"1467:66:4","text":"@notice validate, transfer ownership, and emit relevant events"},"id":229,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1545:18:4","nodeType":"FunctionDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"mutability":"mutable","name":"to","nameLocation":"1572:2:4","nodeType":"VariableDeclaration","scope":229,"src":"1564:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"1564:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1563:12:4"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"1584:0:4"},"scope":251,"src":"1536:239:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":241,"nodeType":"Block","src":"1853:118:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":234,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1918:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1922:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1918:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":236,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"1932:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1918:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1941:24:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""},"value":"Only callable by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""}],"id":233,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1910:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":240,"nodeType":"ExpressionStatement","src":"1910:56:4"}]},"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"1779:27:4","text":"@notice validate access"},"id":242,"implemented":true,"kind":"function","modifiers":[],"name":"_validateOwnership","nameLocation":"1818:18:4","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"1836:2:4"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[],"src":"1853:0:4"},"scope":251,"src":"1809:162:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2069:38:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":245,"name":"_validateOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"2075:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2075:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":247,"nodeType":"ExpressionStatement","src":"2075:20:4"},{"id":248,"nodeType":"PlaceholderStatement","src":"2101:1:4"}]},"documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"1975:70:4","text":"@notice Reverts if called by anyone other than the contract owner."},"id":250,"name":"onlyOwner","nameLocation":"2057:9:4","nodeType":"ModifierDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[],"src":"2066:2:4"},"src":"2048:59:4","virtual":false,"visibility":"internal"}],"scope":252,"src":"216:1893:4","usedErrors":[],"usedEvents":[105,111]}],"src":"32:2078:4"},"id":4},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","exportedSymbols":{"IOwnable":[267]},"id":268,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":253,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IOwnable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":267,"linearizedBaseContracts":[267],"name":"IOwnable","nameLocation":"67:8:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":258,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"89:5:5","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"94:2:5"},"returnParameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"115:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"115:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"114:9:5"},"scope":267,"src":"80:44:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f2fde38b","id":263,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"137:17:5","nodeType":"FunctionDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"recipient","nameLocation":"163:9:5","nodeType":"VariableDeclaration","scope":263,"src":"155:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"155:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"154:19:5"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"182:0:5"},"scope":267,"src":"128:55:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79ba5097","id":266,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"196:15:5","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[],"src":"211:2:5"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[],"src":"222:0:5"},"scope":267,"src":"187:36:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":268,"src":"57:168:5","usedErrors":[],"usedEvents":[]}],"src":"32:194:5"},"id":5},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[325]},"id":326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":269,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":270,"nodeType":"StructuredDocumentation","src":"57:5275:6","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":325,"linearizedBaseContracts":[325],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:6","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":276,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:6","nodeType":"ErrorDefinition","parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"have","nameLocation":"5413:4:6","nodeType":"VariableDeclaration","scope":276,"src":"5405:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"want","nameLocation":"5427:4:6","nodeType":"VariableDeclaration","scope":276,"src":"5419:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":273,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:6"},"src":"5373:60:6"},{"constant":false,"id":278,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5546:14:6","nodeType":"VariableDeclaration","scope":325,"src":"5520:40:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"5520:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":288,"nodeType":"Block","src":"5677:43:6","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":284,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"5683:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":285,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"5700:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5683:32:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":287,"nodeType":"ExpressionStatement","src":"5683:32:6"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"5565:72:6","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":289,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5660:15:6","nodeType":"VariableDeclaration","scope":289,"src":"5652:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5651:25:6"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"5677:0:6"},"scope":325,"src":"5640:80:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"5724:686:6","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":298,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6514:18:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"mutability":"mutable","name":"requestId","nameLocation":"6541:9:6","nodeType":"VariableDeclaration","scope":298,"src":"6533:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"6533:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"randomWords","nameLocation":"6569:11:6","nodeType":"VariableDeclaration","scope":298,"src":"6552:28:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"6552:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":294,"nodeType":"ArrayTypeName","src":"6552:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6532:49:6"},"returnParameters":{"id":297,"nodeType":"ParameterList","parameters":[],"src":"6598:0:6"},"scope":325,"src":"6505:94:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":323,"nodeType":"Block","src":"6883:167:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":306,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6893:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6897:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6893:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":308,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"6907:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6893:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":317,"nodeType":"IfStatement","src":"6889:109:6","trueBody":{"id":316,"nodeType":"Block","src":"6923:75:6","statements":[{"errorCall":{"arguments":[{"expression":{"id":311,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6964:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6968:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6964:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":313,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"6976:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":310,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"6938:25:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6938:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":315,"nodeType":"RevertStatement","src":"6931:60:6"}]}},{"expression":{"arguments":[{"id":319,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"7022:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":320,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"7033:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":318,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7003:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7003:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"ExpressionStatement","src":"7003:42:6"}]},"functionSelector":"1fe543e3","id":324,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6803:21:6","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"requestId","nameLocation":"6833:9:6","nodeType":"VariableDeclaration","scope":324,"src":"6825:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":299,"name":"uint256","nodeType":"ElementaryTypeName","src":"6825:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"randomWords","nameLocation":"6861:11:6","nodeType":"VariableDeclaration","scope":324,"src":"6844:28:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":301,"name":"uint256","nodeType":"ElementaryTypeName","src":"6844:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":302,"nodeType":"ArrayTypeName","src":"6844:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6824:49:6"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"6883:0:6"},"scope":325,"src":"6794:256:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":326,"src":"5333:1719:6","usedErrors":[276],"usedEvents":[]}],"src":"32:7021:6"},"id":6},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[421]},"id":422,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":327,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":421,"linearizedBaseContracts":[421],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"97:267:7","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":338,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:7","nodeType":"FunctionDefinition","parameters":{"id":329,"nodeType":"ParameterList","parameters":[],"src":"392:2:7"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":338,"src":"418:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":330,"name":"uint16","nodeType":"ElementaryTypeName","src":"418:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":338,"src":"426:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":332,"name":"uint32","nodeType":"ElementaryTypeName","src":"426:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":338,"src":"434:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"434:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":335,"nodeType":"ArrayTypeName","src":"434:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"417:34:7"},"scope":421,"src":"367:85:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"456:1511:7","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":354,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"1979:18:7","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"keyHash","nameLocation":"2011:7:7","nodeType":"VariableDeclaration","scope":354,"src":"2003:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"mutability":"mutable","name":"subId","nameLocation":"2031:5:7","nodeType":"VariableDeclaration","scope":354,"src":"2024:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":342,"name":"uint64","nodeType":"ElementaryTypeName","src":"2024:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2049:27:7","nodeType":"VariableDeclaration","scope":354,"src":"2042:34:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":344,"name":"uint16","nodeType":"ElementaryTypeName","src":"2042:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2089:16:7","nodeType":"VariableDeclaration","scope":354,"src":"2082:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":346,"name":"uint32","nodeType":"ElementaryTypeName","src":"2082:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"numWords","nameLocation":"2118:8:7","nodeType":"VariableDeclaration","scope":354,"src":"2111:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":348,"name":"uint32","nodeType":"ElementaryTypeName","src":"2111:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1997:133:7"},"returnParameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"requestId","nameLocation":"2157:9:7","nodeType":"VariableDeclaration","scope":354,"src":"2149:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2148:19:7"},"scope":421,"src":"1970:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"2172:384:7","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":360,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2568:18:7","nodeType":"FunctionDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[],"src":"2586:2:7"},"returnParameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"subId","nameLocation":"2614:5:7","nodeType":"VariableDeclaration","scope":360,"src":"2607:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":357,"name":"uint64","nodeType":"ElementaryTypeName","src":"2607:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2606:14:7"},"scope":421,"src":"2559:62:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"2625:381:7","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3018:15:7","nodeType":"FunctionDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"subId","nameLocation":"3046:5:7","nodeType":"VariableDeclaration","scope":375,"src":"3039:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":362,"name":"uint64","nodeType":"ElementaryTypeName","src":"3039:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3033:22:7"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"balance","nameLocation":"3086:7:7","nodeType":"VariableDeclaration","scope":375,"src":"3079:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":365,"name":"uint96","nodeType":"ElementaryTypeName","src":"3079:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"reqCount","nameLocation":"3102:8:7","nodeType":"VariableDeclaration","scope":375,"src":"3095:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":367,"name":"uint64","nodeType":"ElementaryTypeName","src":"3095:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"owner","nameLocation":"3120:5:7","nodeType":"VariableDeclaration","scope":375,"src":"3112:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"3112:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"consumers","nameLocation":"3144:9:7","nodeType":"VariableDeclaration","scope":375,"src":"3127:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":371,"name":"address","nodeType":"ElementaryTypeName","src":"3127:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":372,"nodeType":"ArrayTypeName","src":"3127:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3078:76:7"},"scope":421,"src":"3009:146:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"3159:164:7","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3335:32:7","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"subId","nameLocation":"3375:5:7","nodeType":"VariableDeclaration","scope":383,"src":"3368:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":377,"name":"uint64","nodeType":"ElementaryTypeName","src":"3368:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"newOwner","nameLocation":"3390:8:7","nodeType":"VariableDeclaration","scope":383,"src":"3382:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":379,"name":"address","nodeType":"ElementaryTypeName","src":"3382:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3367:32:7"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[],"src":"3408:0:7"},"scope":421,"src":"3326:83:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"3413:212:7","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":389,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3637:31:7","nodeType":"FunctionDefinition","parameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"subId","nameLocation":"3676:5:7","nodeType":"VariableDeclaration","scope":389,"src":"3669:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":385,"name":"uint64","nodeType":"ElementaryTypeName","src":"3669:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3668:14:7"},"returnParameters":{"id":388,"nodeType":"ParameterList","parameters":[],"src":"3691:0:7"},"scope":421,"src":"3628:64:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":390,"nodeType":"StructuredDocumentation","src":"3696:170:7","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":397,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3878:11:7","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"subId","nameLocation":"3897:5:7","nodeType":"VariableDeclaration","scope":397,"src":"3890:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":391,"name":"uint64","nodeType":"ElementaryTypeName","src":"3890:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"consumer","nameLocation":"3912:8:7","nodeType":"VariableDeclaration","scope":397,"src":"3904:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":393,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3889:32:7"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[],"src":"3930:0:7"},"scope":421,"src":"3869:62:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"3935:172:7","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":405,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4119:14:7","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"subId","nameLocation":"4141:5:7","nodeType":"VariableDeclaration","scope":405,"src":"4134:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":399,"name":"uint64","nodeType":"ElementaryTypeName","src":"4134:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":402,"mutability":"mutable","name":"consumer","nameLocation":"4156:8:7","nodeType":"VariableDeclaration","scope":405,"src":"4148:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4133:32:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[],"src":"4174:0:7"},"scope":421,"src":"4110:65:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"4179:140:7","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":413,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4331:18:7","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"subId","nameLocation":"4357:5:7","nodeType":"VariableDeclaration","scope":413,"src":"4350:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":407,"name":"uint64","nodeType":"ElementaryTypeName","src":"4350:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"to","nameLocation":"4372:2:7","nodeType":"VariableDeclaration","scope":413,"src":"4364:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":409,"name":"address","nodeType":"ElementaryTypeName","src":"4364:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4349:26:7"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[],"src":"4384:0:7"},"scope":421,"src":"4322:63:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":420,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4690:20:7","nodeType":"FunctionDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"subId","nameLocation":"4718:5:7","nodeType":"VariableDeclaration","scope":420,"src":"4711:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":414,"name":"uint64","nodeType":"ElementaryTypeName","src":"4711:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4710:14:7"},"returnParameters":{"id":419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":420,"src":"4748:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":417,"name":"bool","nodeType":"ElementaryTypeName","src":"4748:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4747:6:7"},"scope":421,"src":"4681:73:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":422,"src":"57:4699:7","usedErrors":[],"usedEvents":[]}],"src":"32:4725:7"},"id":7},"contracts/Lottery.sol":{"ast":{"absolutePath":"contracts/Lottery.sol","exportedSymbols":{"AutomationCompatibleInterface":[67],"ConfirmedOwner":[88],"Lottery_UpkeepNotNeeded":[445],"Lottery__NotEnoughETHEntered":[433],"Lottery__NotOpen":[437],"Lottery__TransferFailed":[435],"Raffle":[821],"VRFConsumerBaseV2":[325],"VRFCoordinatorV2Interface":[421]},"id":822,"license":"SEE LICENSE IN LICENSE","nodeType":"SourceUnit","nodes":[{"id":423,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"51:23:8"},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","id":425,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":822,"sourceUnit":422,"src":"76:117:8","symbolAliases":[{"foreign":{"id":424,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"84:25:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":427,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":822,"sourceUnit":326,"src":"194:90:8","symbolAliases":[{"foreign":{"id":426,"name":"VRFConsumerBaseV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"202:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","file":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","id":429,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":822,"sourceUnit":89,"src":"285:94:8","symbolAliases":[{"foreign":{"id":428,"name":"ConfirmedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"293:14:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","file":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","id":431,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":822,"sourceUnit":49,"src":"380:112:8","symbolAliases":[{"foreign":{"id":430,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"388:29:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"errorSelector":"ec269fd1","id":433,"name":"Lottery__NotEnoughETHEntered","nameLocation":"500:28:8","nodeType":"ErrorDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"528:2:8"},"src":"494:37:8"},{"errorSelector":"1c940120","id":435,"name":"Lottery__TransferFailed","nameLocation":"538:23:8","nodeType":"ErrorDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[],"src":"561:2:8"},"src":"532:32:8"},{"errorSelector":"e76be6fc","id":437,"name":"Lottery__NotOpen","nameLocation":"571:16:8","nodeType":"ErrorDefinition","parameters":{"id":436,"nodeType":"ParameterList","parameters":[],"src":"587:2:8"},"src":"565:25:8"},{"errorSelector":"6f118e90","id":445,"name":"Lottery_UpkeepNotNeeded","nameLocation":"597:23:8","nodeType":"ErrorDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"currentBalance","nameLocation":"629:14:8","nodeType":"VariableDeclaration","scope":445,"src":"621:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"621:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"numPlayers","nameLocation":"653:10:8","nodeType":"VariableDeclaration","scope":445,"src":"645:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":440,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"raffleState","nameLocation":"673:11:8","nodeType":"VariableDeclaration","scope":445,"src":"665:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"665:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"620:65:8"},"src":"591:95:8"},{"abstract":true,"baseContracts":[{"baseName":{"id":447,"name":"VRFConsumerBaseV2","nameLocations":["928:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"928:17:8"},"id":448,"nodeType":"InheritanceSpecifier","src":"928:17:8"},{"baseName":{"id":449,"name":"AutomationCompatibleInterface","nameLocations":["947:29:8"],"nodeType":"IdentifierPath","referencedDeclaration":67,"src":"947:29:8"},"id":450,"nodeType":"InheritanceSpecifier","src":"947:29:8"}],"canonicalName":"Raffle","contractDependencies":[],"contractKind":"contract","documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"688:210:8","text":"@title A sample Raffle Contract\n @author Youthisguy\n @notice This contract is for creating an untamparable decentralized smart contract\n @dev This implements Chainlink VRF v2 and Chainlink Keepers"},"fullyImplemented":true,"id":821,"linearizedBaseContracts":[821,67,325],"name":"Raffle","nameLocation":"918:6:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Raffle.RaffleState","id":453,"members":[{"id":451,"name":"OPEN","nameLocation":"1038:4:8","nodeType":"EnumValue","src":"1038:4:8"},{"id":452,"name":"CALCULATING","nameLocation":"1052:11:8","nodeType":"EnumValue","src":"1052:11:8"}],"name":"RaffleState","nameLocation":"1016:11:8","nodeType":"EnumDefinition","src":"1011:58:8"},{"constant":false,"id":455,"mutability":"immutable","name":"i_entranceFee","nameLocation":"1127:13:8","nodeType":"VariableDeclaration","scope":821,"src":"1101:39:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":458,"mutability":"mutable","name":"s_players","nameLocation":"1172:9:8","nodeType":"VariableDeclaration","scope":821,"src":"1146:35:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"1146:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":457,"nodeType":"ArrayTypeName","src":"1146:17:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":461,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"1231:16:8","nodeType":"VariableDeclaration","scope":821,"src":"1187:60:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$421","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":460,"nodeType":"UserDefinedTypeName","pathNode":{"id":459,"name":"VRFCoordinatorV2Interface","nameLocations":["1187:25:8"],"nodeType":"IdentifierPath","referencedDeclaration":421,"src":"1187:25:8"},"referencedDeclaration":421,"src":"1187:25:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$421","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":463,"mutability":"immutable","name":"i_gasLane","nameLocation":"1279:9:8","nodeType":"VariableDeclaration","scope":821,"src":"1253:35:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1253:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":465,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"1319:16:8","nodeType":"VariableDeclaration","scope":821,"src":"1294:41:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":464,"name":"uint64","nodeType":"ElementaryTypeName","src":"1294:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":467,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"1366:18:8","nodeType":"VariableDeclaration","scope":821,"src":"1341:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":466,"name":"uint32","nodeType":"ElementaryTypeName","src":"1341:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":470,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"1414:21:8","nodeType":"VariableDeclaration","scope":821,"src":"1390:49:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":468,"name":"uint16","nodeType":"ElementaryTypeName","src":"1390:6:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1438:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":473,"mutability":"constant","name":"NUM_WORDS","nameLocation":"1469:9:8","nodeType":"VariableDeclaration","scope":821,"src":"1445:37:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":471,"name":"uint16","nodeType":"ElementaryTypeName","src":"1445:6:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1481:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":475,"mutability":"mutable","name":"s_recentWinner","nameLocation":"1533:14:8","nodeType":"VariableDeclaration","scope":821,"src":"1517:30:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":478,"mutability":"mutable","name":"s_raffleState","nameLocation":"1573:13:8","nodeType":"VariableDeclaration","scope":821,"src":"1553:33:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"},"typeName":{"id":477,"nodeType":"UserDefinedTypeName","pathNode":{"id":476,"name":"RaffleState","nameLocations":["1553:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"1553:11:8"},"referencedDeclaration":453,"src":"1553:11:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"visibility":"private"},{"constant":false,"id":480,"mutability":"mutable","name":"s_lastTimeStamp","nameLocation":"1608:15:8","nodeType":"VariableDeclaration","scope":821,"src":"1592:31:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"1592:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":482,"mutability":"immutable","name":"i_interval","nameLocation":"1655:10:8","nodeType":"VariableDeclaration","scope":821,"src":"1629:36:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"1629:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"anonymous":false,"eventSelector":"1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c","id":486,"name":"LotteryEnter","nameLocation":"1695:12:8","nodeType":"EventDefinition","parameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1724:6:8","nodeType":"VariableDeclaration","scope":486,"src":"1708:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"1708:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1707:24:8"},"src":"1689:43:8"},{"anonymous":false,"eventSelector":"0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d4","id":490,"name":"RaffleEnter","nameLocation":"1743:11:8","nodeType":"EventDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"indexed":true,"mutability":"mutable","name":"participant","nameLocation":"1771:11:8","nodeType":"VariableDeclaration","scope":490,"src":"1755:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"1755:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1754:29:8"},"src":"1737:47:8"},{"anonymous":false,"eventSelector":"cd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b","id":494,"name":"RequestedRaffleWinner","nameLocation":"1795:21:8","nodeType":"EventDefinition","parameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1833:9:8","nodeType":"VariableDeclaration","scope":494,"src":"1817:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"1817:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1816:27:8"},"src":"1789:55:8"},{"anonymous":false,"eventSelector":"5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df","id":498,"name":"WinnerPicked","nameLocation":"1855:12:8","nodeType":"EventDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1884:6:8","nodeType":"VariableDeclaration","scope":498,"src":"1868:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":495,"name":"address","nodeType":"ElementaryTypeName","src":"1868:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1867:24:8"},"src":"1849:43:8"},{"body":{"id":552,"nodeType":"Block","src":"2148:350:8","statements":[{"expression":{"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":516,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2158:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":517,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"2174:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2158:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":519,"nodeType":"ExpressionStatement","src":"2158:27:8"},{"expression":{"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":520,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"2195:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$421","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":522,"name":"vrfCordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2240:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":521,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"2214:25:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$421_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2214:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$421","typeString":"contract VRFCoordinatorV2Interface"}},"src":"2195:61:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$421","typeString":"contract VRFCoordinatorV2Interface"}},"id":525,"nodeType":"ExpressionStatement","src":"2195:61:8"},{"expression":{"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":526,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"2266:9:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":527,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"2278:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2266:19:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":529,"nodeType":"ExpressionStatement","src":"2266:19:8"},{"expression":{"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":530,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"2295:16:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":531,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"2314:14:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2295:33:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":533,"nodeType":"ExpressionStatement","src":"2295:33:8"},{"expression":{"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":534,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"2338:18:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":535,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2359:16:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2338:37:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":537,"nodeType":"ExpressionStatement","src":"2338:37:8"},{"expression":{"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":538,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2385:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":539,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2401:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$453_$","typeString":"type(enum Raffle.RaffleState)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:4:8","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":451,"src":"2401:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"src":"2385:32:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"id":542,"nodeType":"ExpressionStatement","src":"2385:32:8"},{"expression":{"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":543,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2427:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":544,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2445:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2451:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"2445:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2427:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":547,"nodeType":"ExpressionStatement","src":"2427:33:8"},{"expression":{"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":548,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2470:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":549,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"2483:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2470:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":551,"nodeType":"ExpressionStatement","src":"2470:21:8"}]},"id":553,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":513,"name":"vrfCordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2131:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":514,"kind":"baseConstructorSpecifier","modifierName":{"id":512,"name":"VRFConsumerBaseV2","nameLocations":["2113:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"2113:17:8"},"nodeType":"ModifierInvocation","src":"2113:34:8"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"vrfCordinatorV2","nameLocation":"1947:15:8","nodeType":"VariableDeclaration","scope":553,"src":"1939:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"entranceFee","nameLocation":"1980:11:8","nodeType":"VariableDeclaration","scope":553,"src":"1972:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"gasLane","nameLocation":"2009:7:8","nodeType":"VariableDeclaration","scope":553,"src":"2001:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2001:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"subscriptionId","nameLocation":"2033:14:8","nodeType":"VariableDeclaration","scope":553,"src":"2026:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":505,"name":"uint64","nodeType":"ElementaryTypeName","src":"2026:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2064:16:8","nodeType":"VariableDeclaration","scope":553,"src":"2057:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":507,"name":"uint32","nodeType":"ElementaryTypeName","src":"2057:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"interval","nameLocation":"2098:8:8","nodeType":"VariableDeclaration","scope":553,"src":"2090:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"2090:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1929:183:8"},"returnParameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"2148:0:8"},"scope":821,"src":"1918:580:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":589,"nodeType":"Block","src":"2542:290:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":556,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2556:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2560:5:8","memberName":"value","nodeType":"MemberAccess","src":"2556:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":558,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2568:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2556:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":564,"nodeType":"IfStatement","src":"2552:93:8","trueBody":{"id":563,"nodeType":"Block","src":"2583:62:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":560,"name":"Lottery__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"2604:28:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2604:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":562,"nodeType":"RevertStatement","src":"2597:37:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":565,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2658:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":566,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2675:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$453_$","typeString":"type(enum Raffle.RaffleState)"}},"id":567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2687:4:8","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":451,"src":"2675:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"src":"2658:33:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":573,"nodeType":"IfStatement","src":"2654:89:8","trueBody":{"id":572,"nodeType":"Block","src":"2693:50:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":569,"name":"Lottery__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"2714:16:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2714:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":571,"nodeType":"RevertStatement","src":"2707:25:8"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":579,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2775:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2779:6:8","memberName":"sender","nodeType":"MemberAccess","src":"2775:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2767:8:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":577,"name":"address","nodeType":"ElementaryTypeName","src":"2767:8:8","stateMutability":"payable","typeDescriptions":{}}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2767:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":574,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2752:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2762:4:8","memberName":"push","nodeType":"MemberAccess","src":"2752:14:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2752:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":583,"nodeType":"ExpressionStatement","src":"2752:35:8"},{"eventCall":{"arguments":[{"expression":{"id":585,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2814:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2818:6:8","memberName":"sender","nodeType":"MemberAccess","src":"2814:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":584,"name":"RaffleEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2802:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"EmitStatement","src":"2797:28:8"}]},"functionSelector":"2cfcc539","id":590,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"2513:11:8","nodeType":"FunctionDefinition","parameters":{"id":554,"nodeType":"ParameterList","parameters":[],"src":"2524:2:8"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[],"src":"2542:0:8"},"scope":821,"src":"2504:328:8","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[60],"body":{"id":649,"nodeType":"Block","src":"3406:322:8","statements":[{"assignments":[602],"declarations":[{"constant":false,"id":602,"mutability":"mutable","name":"isOpen","nameLocation":"3421:6:8","nodeType":"VariableDeclaration","scope":649,"src":"3416:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":601,"name":"bool","nodeType":"ElementaryTypeName","src":"3416:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":608,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":603,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"3431:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$453_$","typeString":"type(enum Raffle.RaffleState)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3443:4:8","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":451,"src":"3431:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":605,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"3451:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"src":"3431:33:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":607,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3430:35:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3416:49:8"},{"assignments":[610],"declarations":[{"constant":false,"id":610,"mutability":"mutable","name":"timePassed","nameLocation":"3480:10:8","nodeType":"VariableDeclaration","scope":649,"src":"3475:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":609,"name":"bool","nodeType":"ElementaryTypeName","src":"3475:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":619,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":611,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3495:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3501:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"3495:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":613,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"3513:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3495:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3494:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":616,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"3532:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3494:48:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3493:50:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3475:68:8"},{"assignments":[621],"declarations":[{"constant":false,"id":621,"mutability":"mutable","name":"hasPlayers","nameLocation":"3558:10:8","nodeType":"VariableDeclaration","scope":649,"src":"3553:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":620,"name":"bool","nodeType":"ElementaryTypeName","src":"3553:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":627,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":622,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"3572:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3582:6:8","memberName":"length","nodeType":"MemberAccess","src":"3572:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3591:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3572:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":626,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3571:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3553:40:8"},{"assignments":[629],"declarations":[{"constant":false,"id":629,"mutability":"mutable","name":"hasBalance","nameLocation":"3608:10:8","nodeType":"VariableDeclaration","scope":649,"src":"3603:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":628,"name":"bool","nodeType":"ElementaryTypeName","src":"3603:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":637,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":632,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3629:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$821","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$821","typeString":"contract Raffle"}],"id":631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3621:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":630,"name":"address","nodeType":"ElementaryTypeName","src":"3621:7:8","typeDescriptions":{}}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3621:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3635:7:8","memberName":"balance","nodeType":"MemberAccess","src":"3621:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3645:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3621:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3603:43:8"},{"expression":{"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":638,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"3656:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":639,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3672:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":640,"name":"timePassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"3682:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3672:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":642,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"3696:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3672:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":644,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"3710:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3672:48:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":646,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3671:50:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3656:65:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":648,"nodeType":"ExpressionStatement","src":"3656:65:8"}]},"documentation":{"id":591,"nodeType":"StructuredDocumentation","src":"2838:416:8","text":" @dev this is the function that the Chainlink keeper nodes call\n they look for the upkeepNeeded to return true\n the following should be true in order to return true\n 1. Our time interval should have passed\n 2. The lottery should have atleast one player, and some ETH\n 3. Our subscription should have atleast some LINK\n 4. The lottery should be in an \"open\" state"},"functionSelector":"6e04ff0d","id":650,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"3269:11:8","nodeType":"FunctionDefinition","overrides":{"id":595,"nodeType":"OverrideSpecifier","overrides":[],"src":"3337:8:8"},"parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":650,"src":"3290:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":592,"name":"bytes","nodeType":"ElementaryTypeName","src":"3290:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3280:44:8"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"3360:12:8","nodeType":"VariableDeclaration","scope":650,"src":"3355:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":596,"name":"bool","nodeType":"ElementaryTypeName","src":"3355:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":650,"src":"3374:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":598,"name":"bytes","nodeType":"ElementaryTypeName","src":"3374:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3354:51:8"},"scope":821,"src":"3260:468:8","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[66],"body":{"id":703,"nodeType":"Block","src":"3809:598:8","statements":[{"assignments":[657,null],"declarations":[{"constant":false,"id":657,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"3825:12:8","nodeType":"VariableDeclaration","scope":703,"src":"3820:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":656,"name":"bool","nodeType":"ElementaryTypeName","src":"3820:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":664,"initialValue":{"arguments":[{"arguments":[{"hexValue":"","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3872:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":659,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3855:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3859:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"3855:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3855:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":658,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"3843:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3843:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3819:57:8"},{"condition":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3890:13:8","subExpression":{"id":665,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3891:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":682,"nodeType":"IfStatement","src":"3886:201:8","trueBody":{"id":681,"nodeType":"Block","src":"3905:182:8","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":670,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3975:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$821","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$821","typeString":"contract Raffle"}],"id":669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3967:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":668,"name":"address","nodeType":"ElementaryTypeName","src":"3967:7:8","typeDescriptions":{}}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3967:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3981:7:8","memberName":"balance","nodeType":"MemberAccess","src":"3967:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":673,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4006:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4016:6:8","memberName":"length","nodeType":"MemberAccess","src":"4006:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":677,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"4048:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}],"id":676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4040:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"4040:7:8","typeDescriptions":{}}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4040:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":667,"name":"Lottery_UpkeepNotNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"3926:23:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3926:150:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":680,"nodeType":"RevertStatement","src":"3919:157:8"}]}},{"expression":{"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":683,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"4096:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":684,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"4112:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$453_$","typeString":"type(enum Raffle.RaffleState)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4124:11:8","memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":452,"src":"4112:23:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"src":"4096:39:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"id":687,"nodeType":"ExpressionStatement","src":"4096:39:8"},{"assignments":[689],"declarations":[{"constant":false,"id":689,"mutability":"mutable","name":"requestId","nameLocation":"4153:9:8","nodeType":"VariableDeclaration","scope":703,"src":"4145:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"4145:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":698,"initialValue":{"arguments":[{"id":692,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"4214:9:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":693,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"4237:16:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":694,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"4267:21:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":695,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"4302:18:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":696,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"4334:9:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":690,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"4165:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$421","typeString":"contract VRFCoordinatorV2Interface"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4182:18:8","memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":354,"src":"4165:35:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4165:188:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4145:208:8"},{"eventCall":{"arguments":[{"id":700,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"4390:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":699,"name":"RequestedRaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"4368:21:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4368:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"EmitStatement","src":"4363:37:8"}]},"functionSelector":"4585e33b","id":704,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"3743:13:8","nodeType":"FunctionDefinition","overrides":{"id":654,"nodeType":"OverrideSpecifier","overrides":[],"src":"3800:8:8"},"parameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":704,"src":"3757:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":651,"name":"bytes","nodeType":"ElementaryTypeName","src":"3757:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3756:34:8"},"returnParameters":{"id":655,"nodeType":"ParameterList","parameters":[],"src":"3809:0:8"},"scope":821,"src":"3734:673:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[298],"body":{"id":774,"nodeType":"Block","src":"4534:510:8","statements":[{"assignments":[714],"declarations":[{"constant":false,"id":714,"mutability":"mutable","name":"indexOfWinner","nameLocation":"4552:13:8","nodeType":"VariableDeclaration","scope":774,"src":"4544:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"4544:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":721,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":715,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"4568:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":717,"indexExpression":{"hexValue":"30","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4580:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4568:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":718,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4585:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4595:6:8","memberName":"length","nodeType":"MemberAccess","src":"4585:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4568:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4544:57:8"},{"assignments":[723],"declarations":[{"constant":false,"id":723,"mutability":"mutable","name":"recentWinner","nameLocation":"4627:12:8","nodeType":"VariableDeclaration","scope":774,"src":"4611:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"4611:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":727,"initialValue":{"baseExpression":{"id":724,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4642:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":726,"indexExpression":{"id":725,"name":"indexOfWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"4652:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4642:24:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"4611:55:8"},{"expression":{"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":728,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"4676:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":729,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"4693:12:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4676:29:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":731,"nodeType":"ExpressionStatement","src":"4676:29:8"},{"expression":{"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":732,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"4715:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":733,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"4731:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$453_$","typeString":"type(enum Raffle.RaffleState)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4743:4:8","memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":451,"src":"4731:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"src":"4715:32:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"id":736,"nodeType":"ExpressionStatement","src":"4715:32:8"},{"expression":{"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":737,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"4757:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4791:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4769:21:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"4773:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":739,"nodeType":"ArrayTypeName","src":"4773:17:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4769:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"4757:36:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":744,"nodeType":"ExpressionStatement","src":"4757:36:8"},{"expression":{"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":745,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"4803:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":746,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4821:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4827:9:8","memberName":"timestamp","nodeType":"MemberAccess","src":"4821:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4803:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":749,"nodeType":"ExpressionStatement","src":"4803:33:8"},{"assignments":[751,null],"declarations":[{"constant":false,"id":751,"mutability":"mutable","name":"success","nameLocation":"4852:7:8","nodeType":"VariableDeclaration","scope":774,"src":"4847:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":750,"name":"bool","nodeType":"ElementaryTypeName","src":"4847:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":762,"initialValue":{"arguments":[{"hexValue":"","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4913:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":752,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"4865:12:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4878:4:8","memberName":"call","nodeType":"MemberAccess","src":"4865:17:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":756,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4898:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$821","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$821","typeString":"contract Raffle"}],"id":755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4890:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":754,"name":"address","nodeType":"ElementaryTypeName","src":"4890:7:8","typeDescriptions":{}}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4890:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4904:7:8","memberName":"balance","nodeType":"MemberAccess","src":"4890:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4865:47:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4865:51:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4846:70:8"},{"condition":{"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4930:8:8","subExpression":{"id":763,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"4931:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":769,"nodeType":"IfStatement","src":"4926:71:8","trueBody":{"id":768,"nodeType":"Block","src":"4940:57:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":765,"name":"Lottery__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"4961:23:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4961:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"RevertStatement","src":"4954:32:8"}]}},{"eventCall":{"arguments":[{"id":771,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"5024:12:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":770,"name":"WinnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"5011:12:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5011:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":773,"nodeType":"EmitStatement","src":"5006:31:8"}]},"id":775,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"4422:18:8","nodeType":"FunctionDefinition","overrides":{"id":711,"nodeType":"OverrideSpecifier","overrides":[],"src":"4525:8:8"},"parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":775,"src":"4450:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"4450:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"randomWords","nameLocation":"4498:11:8","nodeType":"VariableDeclaration","scope":775,"src":"4481:28:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"4481:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":708,"nodeType":"ArrayTypeName","src":"4481:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4440:75:8"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[],"src":"4534:0:8"},"scope":821,"src":"4413:631:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":782,"nodeType":"Block","src":"5136:37:8","statements":[{"expression":{"id":780,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5153:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":779,"id":781,"nodeType":"Return","src":"5146:20:8"}]},"functionSelector":"09bc33a7","id":783,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"5089:14:8","nodeType":"FunctionDefinition","parameters":{"id":776,"nodeType":"ParameterList","parameters":[],"src":"5103:2:8"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":783,"src":"5127:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":777,"name":"uint256","nodeType":"ElementaryTypeName","src":"5127:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5126:9:8"},"scope":821,"src":"5080:93:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":794,"nodeType":"Block","src":"5243:40:8","statements":[{"expression":{"baseExpression":{"id":790,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"5260:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":792,"indexExpression":{"id":791,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"5270:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5260:16:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":789,"id":793,"nodeType":"Return","src":"5253:23:8"}]},"functionSelector":"e55ae4e8","id":795,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"5188:9:8","nodeType":"FunctionDefinition","parameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"index","nameLocation":"5206:5:8","nodeType":"VariableDeclaration","scope":795,"src":"5198:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"5198:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5197:15:8"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":795,"src":"5234:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"5234:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5233:9:8"},"scope":821,"src":"5179:104:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":802,"nodeType":"Block","src":"5346:38:8","statements":[{"expression":{"id":800,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5363:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":799,"id":801,"nodeType":"Return","src":"5356:21:8"}]},"functionSelector":"473f1ddc","id":803,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"5298:15:8","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[],"src":"5313:2:8"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":803,"src":"5337:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"5337:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5336:9:8"},"scope":821,"src":"5289:95:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":811,"nodeType":"Block","src":"5450:38:8","statements":[{"expression":{"id":809,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"5468:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"functionReturnParameters":808,"id":810,"nodeType":"Return","src":"5461:20:8"}]},"functionSelector":"115cbaf5","id":812,"implemented":true,"kind":"function","modifiers":[],"name":"getRaffleState","nameLocation":"5399:14:8","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[],"src":"5413:2:8"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":812,"src":"5437:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"},"typeName":{"id":806,"nodeType":"UserDefinedTypeName","pathNode":{"id":805,"name":"RaffleState","nameLocations":["5437:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"5437:11:8"},"referencedDeclaration":453,"src":"5437:11:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$453","typeString":"enum Raffle.RaffleState"}},"visibility":"internal"}],"src":"5436:13:8"},"scope":821,"src":"5390:98:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":819,"nodeType":"Block","src":"5547:33:8","statements":[{"expression":{"id":817,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"5564:9:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":816,"id":818,"nodeType":"Return","src":"5557:16:8"}]},"functionSelector":"53a2c19a","id":820,"implemented":true,"kind":"function","modifiers":[],"name":"getNumWords","nameLocation":"5503:11:8","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"5514:2:8"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":820,"src":"5538:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"5538:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5537:9:8"},"scope":821,"src":"5494:86:8","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":822,"src":"900:4682:8","usedErrors":[276,433,435,437,445],"usedEvents":[486,490,494,498]}],"src":"51:5532:8"},"id":8}},"contracts":{"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol":{"AutomationBase":{"abi":[{"inputs":[],"name":"OnlySimulatedBackend","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212202be9aa2b8bf457da2ec640cdf1ac6d0bd755ccb049a8a1fcad2f3adcc03499fe64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xE9 0xAA 0x2B DUP12 DELEGATECALL JUMPI 0xDA 0x2E 0xC6 BLOCKHASH 0xCD CALL 0xAC PUSH14 0xBD755CCB049A8A1FCAD2F3ADCC0 CALLVALUE SWAP10 INVALID PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"57:634:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212202be9aa2b8bf457da2ec640cdf1ac6d0bd755ccb049a8a1fcad2f3adcc03499fe64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xE9 0xAA 0x2B DUP12 DELEGATECALL JUMPI 0xDA 0x2E 0xC6 BLOCKHASH 0xCD CALL 0xAC PUSH14 0xBD755CCB049A8A1FCAD2F3ADCC0 CALLVALUE SWAP10 INVALID PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"57:634:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"_preventExecution()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":\"AutomationBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol":{"AutomationCompatible":{"abi":[{"inputs":[],"name":"OnlySimulatedBackend","type":"error"},{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":\"AutomationCompatible\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ConfirmedOwner":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_145":{"entryPoint":null,"id":145,"parameterSlots":2,"returnSlots":0},"@_87":{"entryPoint":null,"id":87,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_229":{"entryPoint":303,"id":229,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":681,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":805,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":840,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":747,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":640,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":608,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":603,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":764,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":872,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":658,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3327:9","nodeType":"YulBlock","src":"0:3327:9","statements":[{"body":{"nativeSrc":"47:35:9","nodeType":"YulBlock","src":"47:35:9","statements":[{"nativeSrc":"57:19:9","nodeType":"YulAssignment","src":"57:19:9","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:9","nodeType":"YulLiteral","src":"73:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:9","nodeType":"YulIdentifier","src":"67:5:9"},"nativeSrc":"67:9:9","nodeType":"YulFunctionCall","src":"67:9:9"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:9","nodeType":"YulIdentifier","src":"57:6:9"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:9","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:9","nodeType":"YulTypedName","src":"40:6:9","type":""}],"src":"7:75:9"},{"body":{"nativeSrc":"177:28:9","nodeType":"YulBlock","src":"177:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:9","nodeType":"YulLiteral","src":"194:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:9","nodeType":"YulLiteral","src":"197:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:9","nodeType":"YulIdentifier","src":"187:6:9"},"nativeSrc":"187:12:9","nodeType":"YulFunctionCall","src":"187:12:9"},"nativeSrc":"187:12:9","nodeType":"YulExpressionStatement","src":"187:12:9"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:9","nodeType":"YulFunctionDefinition","src":"88:117:9"},{"body":{"nativeSrc":"300:28:9","nodeType":"YulBlock","src":"300:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:9","nodeType":"YulLiteral","src":"317:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:9","nodeType":"YulLiteral","src":"320:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:9","nodeType":"YulIdentifier","src":"310:6:9"},"nativeSrc":"310:12:9","nodeType":"YulFunctionCall","src":"310:12:9"},"nativeSrc":"310:12:9","nodeType":"YulExpressionStatement","src":"310:12:9"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:9","nodeType":"YulFunctionDefinition","src":"211:117:9"},{"body":{"nativeSrc":"379:81:9","nodeType":"YulBlock","src":"379:81:9","statements":[{"nativeSrc":"389:65:9","nodeType":"YulAssignment","src":"389:65:9","value":{"arguments":[{"name":"value","nativeSrc":"404:5:9","nodeType":"YulIdentifier","src":"404:5:9"},{"kind":"number","nativeSrc":"411:42:9","nodeType":"YulLiteral","src":"411:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:9","nodeType":"YulIdentifier","src":"400:3:9"},"nativeSrc":"400:54:9","nodeType":"YulFunctionCall","src":"400:54:9"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:9","nodeType":"YulIdentifier","src":"389:7:9"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:9","nodeType":"YulTypedName","src":"361:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:9","nodeType":"YulTypedName","src":"371:7:9","type":""}],"src":"334:126:9"},{"body":{"nativeSrc":"511:51:9","nodeType":"YulBlock","src":"511:51:9","statements":[{"nativeSrc":"521:35:9","nodeType":"YulAssignment","src":"521:35:9","value":{"arguments":[{"name":"value","nativeSrc":"550:5:9","nodeType":"YulIdentifier","src":"550:5:9"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:9","nodeType":"YulIdentifier","src":"532:17:9"},"nativeSrc":"532:24:9","nodeType":"YulFunctionCall","src":"532:24:9"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:9","nodeType":"YulIdentifier","src":"521:7:9"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:9","nodeType":"YulTypedName","src":"493:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:9","nodeType":"YulTypedName","src":"503:7:9","type":""}],"src":"466:96:9"},{"body":{"nativeSrc":"611:79:9","nodeType":"YulBlock","src":"611:79:9","statements":[{"body":{"nativeSrc":"668:16:9","nodeType":"YulBlock","src":"668:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:9","nodeType":"YulLiteral","src":"677:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:9","nodeType":"YulLiteral","src":"680:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:9","nodeType":"YulIdentifier","src":"670:6:9"},"nativeSrc":"670:12:9","nodeType":"YulFunctionCall","src":"670:12:9"},"nativeSrc":"670:12:9","nodeType":"YulExpressionStatement","src":"670:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:9","nodeType":"YulIdentifier","src":"634:5:9"},{"arguments":[{"name":"value","nativeSrc":"659:5:9","nodeType":"YulIdentifier","src":"659:5:9"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:9","nodeType":"YulIdentifier","src":"641:17:9"},"nativeSrc":"641:24:9","nodeType":"YulFunctionCall","src":"641:24:9"}],"functionName":{"name":"eq","nativeSrc":"631:2:9","nodeType":"YulIdentifier","src":"631:2:9"},"nativeSrc":"631:35:9","nodeType":"YulFunctionCall","src":"631:35:9"}],"functionName":{"name":"iszero","nativeSrc":"624:6:9","nodeType":"YulIdentifier","src":"624:6:9"},"nativeSrc":"624:43:9","nodeType":"YulFunctionCall","src":"624:43:9"},"nativeSrc":"621:63:9","nodeType":"YulIf","src":"621:63:9"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:9","nodeType":"YulTypedName","src":"604:5:9","type":""}],"src":"568:122:9"},{"body":{"nativeSrc":"759:80:9","nodeType":"YulBlock","src":"759:80:9","statements":[{"nativeSrc":"769:22:9","nodeType":"YulAssignment","src":"769:22:9","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:9","nodeType":"YulIdentifier","src":"784:6:9"}],"functionName":{"name":"mload","nativeSrc":"778:5:9","nodeType":"YulIdentifier","src":"778:5:9"},"nativeSrc":"778:13:9","nodeType":"YulFunctionCall","src":"778:13:9"},"variableNames":[{"name":"value","nativeSrc":"769:5:9","nodeType":"YulIdentifier","src":"769:5:9"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:9","nodeType":"YulIdentifier","src":"827:5:9"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:9","nodeType":"YulIdentifier","src":"800:26:9"},"nativeSrc":"800:33:9","nodeType":"YulFunctionCall","src":"800:33:9"},"nativeSrc":"800:33:9","nodeType":"YulExpressionStatement","src":"800:33:9"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:9","nodeType":"YulTypedName","src":"737:6:9","type":""},{"name":"end","nativeSrc":"745:3:9","nodeType":"YulTypedName","src":"745:3:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:9","nodeType":"YulTypedName","src":"753:5:9","type":""}],"src":"696:143:9"},{"body":{"nativeSrc":"922:274:9","nodeType":"YulBlock","src":"922:274:9","statements":[{"body":{"nativeSrc":"968:83:9","nodeType":"YulBlock","src":"968:83:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:9","nodeType":"YulIdentifier","src":"970:77:9"},"nativeSrc":"970:79:9","nodeType":"YulFunctionCall","src":"970:79:9"},"nativeSrc":"970:79:9","nodeType":"YulExpressionStatement","src":"970:79:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:9","nodeType":"YulIdentifier","src":"943:7:9"},{"name":"headStart","nativeSrc":"952:9:9","nodeType":"YulIdentifier","src":"952:9:9"}],"functionName":{"name":"sub","nativeSrc":"939:3:9","nodeType":"YulIdentifier","src":"939:3:9"},"nativeSrc":"939:23:9","nodeType":"YulFunctionCall","src":"939:23:9"},{"kind":"number","nativeSrc":"964:2:9","nodeType":"YulLiteral","src":"964:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:9","nodeType":"YulIdentifier","src":"935:3:9"},"nativeSrc":"935:32:9","nodeType":"YulFunctionCall","src":"935:32:9"},"nativeSrc":"932:119:9","nodeType":"YulIf","src":"932:119:9"},{"nativeSrc":"1061:128:9","nodeType":"YulBlock","src":"1061:128:9","statements":[{"nativeSrc":"1076:15:9","nodeType":"YulVariableDeclaration","src":"1076:15:9","value":{"kind":"number","nativeSrc":"1090:1:9","nodeType":"YulLiteral","src":"1090:1:9","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:9","nodeType":"YulTypedName","src":"1080:6:9","type":""}]},{"nativeSrc":"1105:74:9","nodeType":"YulAssignment","src":"1105:74:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:9","nodeType":"YulIdentifier","src":"1151:9:9"},{"name":"offset","nativeSrc":"1162:6:9","nodeType":"YulIdentifier","src":"1162:6:9"}],"functionName":{"name":"add","nativeSrc":"1147:3:9","nodeType":"YulIdentifier","src":"1147:3:9"},"nativeSrc":"1147:22:9","nodeType":"YulFunctionCall","src":"1147:22:9"},{"name":"dataEnd","nativeSrc":"1171:7:9","nodeType":"YulIdentifier","src":"1171:7:9"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:9","nodeType":"YulIdentifier","src":"1115:31:9"},"nativeSrc":"1115:64:9","nodeType":"YulFunctionCall","src":"1115:64:9"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:9","nodeType":"YulIdentifier","src":"1105:6:9"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:9","nodeType":"YulTypedName","src":"892:9:9","type":""},{"name":"dataEnd","nativeSrc":"903:7:9","nodeType":"YulTypedName","src":"903:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:9","nodeType":"YulTypedName","src":"915:6:9","type":""}],"src":"845:351:9"},{"body":{"nativeSrc":"1298:73:9","nodeType":"YulBlock","src":"1298:73:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1315:3:9","nodeType":"YulIdentifier","src":"1315:3:9"},{"name":"length","nativeSrc":"1320:6:9","nodeType":"YulIdentifier","src":"1320:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1308:6:9","nodeType":"YulIdentifier","src":"1308:6:9"},"nativeSrc":"1308:19:9","nodeType":"YulFunctionCall","src":"1308:19:9"},"nativeSrc":"1308:19:9","nodeType":"YulExpressionStatement","src":"1308:19:9"},{"nativeSrc":"1336:29:9","nodeType":"YulAssignment","src":"1336:29:9","value":{"arguments":[{"name":"pos","nativeSrc":"1355:3:9","nodeType":"YulIdentifier","src":"1355:3:9"},{"kind":"number","nativeSrc":"1360:4:9","nodeType":"YulLiteral","src":"1360:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1351:3:9","nodeType":"YulIdentifier","src":"1351:3:9"},"nativeSrc":"1351:14:9","nodeType":"YulFunctionCall","src":"1351:14:9"},"variableNames":[{"name":"updated_pos","nativeSrc":"1336:11:9","nodeType":"YulIdentifier","src":"1336:11:9"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1202:169:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1270:3:9","nodeType":"YulTypedName","src":"1270:3:9","type":""},{"name":"length","nativeSrc":"1275:6:9","nodeType":"YulTypedName","src":"1275:6:9","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1286:11:9","nodeType":"YulTypedName","src":"1286:11:9","type":""}],"src":"1202:169:9"},{"body":{"nativeSrc":"1483:68:9","nodeType":"YulBlock","src":"1483:68:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1505:6:9","nodeType":"YulIdentifier","src":"1505:6:9"},{"kind":"number","nativeSrc":"1513:1:9","nodeType":"YulLiteral","src":"1513:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1501:3:9","nodeType":"YulIdentifier","src":"1501:3:9"},"nativeSrc":"1501:14:9","nodeType":"YulFunctionCall","src":"1501:14:9"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nativeSrc":"1517:26:9","nodeType":"YulLiteral","src":"1517:26:9","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nativeSrc":"1494:6:9","nodeType":"YulIdentifier","src":"1494:6:9"},"nativeSrc":"1494:50:9","nodeType":"YulFunctionCall","src":"1494:50:9"},"nativeSrc":"1494:50:9","nodeType":"YulExpressionStatement","src":"1494:50:9"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1377:174:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1475:6:9","nodeType":"YulTypedName","src":"1475:6:9","type":""}],"src":"1377:174:9"},{"body":{"nativeSrc":"1703:220:9","nodeType":"YulBlock","src":"1703:220:9","statements":[{"nativeSrc":"1713:74:9","nodeType":"YulAssignment","src":"1713:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"1779:3:9","nodeType":"YulIdentifier","src":"1779:3:9"},{"kind":"number","nativeSrc":"1784:2:9","nodeType":"YulLiteral","src":"1784:2:9","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1720:58:9","nodeType":"YulIdentifier","src":"1720:58:9"},"nativeSrc":"1720:67:9","nodeType":"YulFunctionCall","src":"1720:67:9"},"variableNames":[{"name":"pos","nativeSrc":"1713:3:9","nodeType":"YulIdentifier","src":"1713:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"1885:3:9","nodeType":"YulIdentifier","src":"1885:3:9"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1796:88:9","nodeType":"YulIdentifier","src":"1796:88:9"},"nativeSrc":"1796:93:9","nodeType":"YulFunctionCall","src":"1796:93:9"},"nativeSrc":"1796:93:9","nodeType":"YulExpressionStatement","src":"1796:93:9"},{"nativeSrc":"1898:19:9","nodeType":"YulAssignment","src":"1898:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"1909:3:9","nodeType":"YulIdentifier","src":"1909:3:9"},{"kind":"number","nativeSrc":"1914:2:9","nodeType":"YulLiteral","src":"1914:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1905:3:9","nodeType":"YulIdentifier","src":"1905:3:9"},"nativeSrc":"1905:12:9","nodeType":"YulFunctionCall","src":"1905:12:9"},"variableNames":[{"name":"end","nativeSrc":"1898:3:9","nodeType":"YulIdentifier","src":"1898:3:9"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"1557:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:9","nodeType":"YulTypedName","src":"1691:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"1699:3:9","nodeType":"YulTypedName","src":"1699:3:9","type":""}],"src":"1557:366:9"},{"body":{"nativeSrc":"2100:248:9","nodeType":"YulBlock","src":"2100:248:9","statements":[{"nativeSrc":"2110:26:9","nodeType":"YulAssignment","src":"2110:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"2122:9:9","nodeType":"YulIdentifier","src":"2122:9:9"},{"kind":"number","nativeSrc":"2133:2:9","nodeType":"YulLiteral","src":"2133:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2118:3:9","nodeType":"YulIdentifier","src":"2118:3:9"},"nativeSrc":"2118:18:9","nodeType":"YulFunctionCall","src":"2118:18:9"},"variableNames":[{"name":"tail","nativeSrc":"2110:4:9","nodeType":"YulIdentifier","src":"2110:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2157:9:9","nodeType":"YulIdentifier","src":"2157:9:9"},{"kind":"number","nativeSrc":"2168:1:9","nodeType":"YulLiteral","src":"2168:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2153:3:9","nodeType":"YulIdentifier","src":"2153:3:9"},"nativeSrc":"2153:17:9","nodeType":"YulFunctionCall","src":"2153:17:9"},{"arguments":[{"name":"tail","nativeSrc":"2176:4:9","nodeType":"YulIdentifier","src":"2176:4:9"},{"name":"headStart","nativeSrc":"2182:9:9","nodeType":"YulIdentifier","src":"2182:9:9"}],"functionName":{"name":"sub","nativeSrc":"2172:3:9","nodeType":"YulIdentifier","src":"2172:3:9"},"nativeSrc":"2172:20:9","nodeType":"YulFunctionCall","src":"2172:20:9"}],"functionName":{"name":"mstore","nativeSrc":"2146:6:9","nodeType":"YulIdentifier","src":"2146:6:9"},"nativeSrc":"2146:47:9","nodeType":"YulFunctionCall","src":"2146:47:9"},"nativeSrc":"2146:47:9","nodeType":"YulExpressionStatement","src":"2146:47:9"},{"nativeSrc":"2202:139:9","nodeType":"YulAssignment","src":"2202:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"2336:4:9","nodeType":"YulIdentifier","src":"2336:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"2210:124:9","nodeType":"YulIdentifier","src":"2210:124:9"},"nativeSrc":"2210:131:9","nodeType":"YulFunctionCall","src":"2210:131:9"},"variableNames":[{"name":"tail","nativeSrc":"2202:4:9","nodeType":"YulIdentifier","src":"2202:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1929:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2080:9:9","nodeType":"YulTypedName","src":"2080:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2095:4:9","nodeType":"YulTypedName","src":"2095:4:9","type":""}],"src":"1929:419:9"},{"body":{"nativeSrc":"2460:67:9","nodeType":"YulBlock","src":"2460:67:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2482:6:9","nodeType":"YulIdentifier","src":"2482:6:9"},{"kind":"number","nativeSrc":"2490:1:9","nodeType":"YulLiteral","src":"2490:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2478:3:9","nodeType":"YulIdentifier","src":"2478:3:9"},"nativeSrc":"2478:14:9","nodeType":"YulFunctionCall","src":"2478:14:9"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"2494:25:9","nodeType":"YulLiteral","src":"2494:25:9","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"2471:6:9","nodeType":"YulIdentifier","src":"2471:6:9"},"nativeSrc":"2471:49:9","nodeType":"YulFunctionCall","src":"2471:49:9"},"nativeSrc":"2471:49:9","nodeType":"YulExpressionStatement","src":"2471:49:9"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2354:173:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2452:6:9","nodeType":"YulTypedName","src":"2452:6:9","type":""}],"src":"2354:173:9"},{"body":{"nativeSrc":"2679:220:9","nodeType":"YulBlock","src":"2679:220:9","statements":[{"nativeSrc":"2689:74:9","nodeType":"YulAssignment","src":"2689:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"2755:3:9","nodeType":"YulIdentifier","src":"2755:3:9"},{"kind":"number","nativeSrc":"2760:2:9","nodeType":"YulLiteral","src":"2760:2:9","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2696:58:9","nodeType":"YulIdentifier","src":"2696:58:9"},"nativeSrc":"2696:67:9","nodeType":"YulFunctionCall","src":"2696:67:9"},"variableNames":[{"name":"pos","nativeSrc":"2689:3:9","nodeType":"YulIdentifier","src":"2689:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2861:3:9","nodeType":"YulIdentifier","src":"2861:3:9"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2772:88:9","nodeType":"YulIdentifier","src":"2772:88:9"},"nativeSrc":"2772:93:9","nodeType":"YulFunctionCall","src":"2772:93:9"},"nativeSrc":"2772:93:9","nodeType":"YulExpressionStatement","src":"2772:93:9"},{"nativeSrc":"2874:19:9","nodeType":"YulAssignment","src":"2874:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"2885:3:9","nodeType":"YulIdentifier","src":"2885:3:9"},{"kind":"number","nativeSrc":"2890:2:9","nodeType":"YulLiteral","src":"2890:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2881:3:9","nodeType":"YulIdentifier","src":"2881:3:9"},"nativeSrc":"2881:12:9","nodeType":"YulFunctionCall","src":"2881:12:9"},"variableNames":[{"name":"end","nativeSrc":"2874:3:9","nodeType":"YulIdentifier","src":"2874:3:9"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"2533:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2667:3:9","nodeType":"YulTypedName","src":"2667:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2675:3:9","nodeType":"YulTypedName","src":"2675:3:9","type":""}],"src":"2533:366:9"},{"body":{"nativeSrc":"3076:248:9","nodeType":"YulBlock","src":"3076:248:9","statements":[{"nativeSrc":"3086:26:9","nodeType":"YulAssignment","src":"3086:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"3098:9:9","nodeType":"YulIdentifier","src":"3098:9:9"},{"kind":"number","nativeSrc":"3109:2:9","nodeType":"YulLiteral","src":"3109:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3094:3:9","nodeType":"YulIdentifier","src":"3094:3:9"},"nativeSrc":"3094:18:9","nodeType":"YulFunctionCall","src":"3094:18:9"},"variableNames":[{"name":"tail","nativeSrc":"3086:4:9","nodeType":"YulIdentifier","src":"3086:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3133:9:9","nodeType":"YulIdentifier","src":"3133:9:9"},{"kind":"number","nativeSrc":"3144:1:9","nodeType":"YulLiteral","src":"3144:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3129:3:9","nodeType":"YulIdentifier","src":"3129:3:9"},"nativeSrc":"3129:17:9","nodeType":"YulFunctionCall","src":"3129:17:9"},{"arguments":[{"name":"tail","nativeSrc":"3152:4:9","nodeType":"YulIdentifier","src":"3152:4:9"},{"name":"headStart","nativeSrc":"3158:9:9","nodeType":"YulIdentifier","src":"3158:9:9"}],"functionName":{"name":"sub","nativeSrc":"3148:3:9","nodeType":"YulIdentifier","src":"3148:3:9"},"nativeSrc":"3148:20:9","nodeType":"YulFunctionCall","src":"3148:20:9"}],"functionName":{"name":"mstore","nativeSrc":"3122:6:9","nodeType":"YulIdentifier","src":"3122:6:9"},"nativeSrc":"3122:47:9","nodeType":"YulFunctionCall","src":"3122:47:9"},"nativeSrc":"3122:47:9","nodeType":"YulExpressionStatement","src":"3122:47:9"},{"nativeSrc":"3178:139:9","nodeType":"YulAssignment","src":"3178:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"3312:4:9","nodeType":"YulIdentifier","src":"3312:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3186:124:9","nodeType":"YulIdentifier","src":"3186:124:9"},"nativeSrc":"3186:131:9","nodeType":"YulFunctionCall","src":"3186:131:9"},"variableNames":[{"name":"tail","nativeSrc":"3178:4:9","nodeType":"YulIdentifier","src":"3178:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2905:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3056:9:9","nodeType":"YulTypedName","src":"3056:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3071:4:9","nodeType":"YulTypedName","src":"3071:4:9","type":""}],"src":"2905:419:9"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610a40380380610a40833981810160405281019061003291906102be565b8060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009a90610348565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610127576101268161012f60201b60201c565b5b5050506103d4565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906103b4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061028b82610260565b9050919050565b61029b81610280565b81146102a657600080fd5b50565b6000815190506102b881610292565b92915050565b6000602082840312156102d4576102d361025b565b5b60006102e2848285016102a9565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006103326018836102eb565b915061033d826102fc565b602082019050919050565b6000602082019050818103600083015261036181610325565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061039e6017836102eb565b91506103a982610368565b602082019050919050565b600060208201905081810360008301526103cd81610391565b9050919050565b61065d806103e36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea264697066735822122096a9b26ff68ebee96d178d08bb91561745cbede2f881906336a024605ef7a2c464736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA40 CODESIZE SUB DUP1 PUSH2 0xA40 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x2BE JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A SWAP1 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x127 JUMPI PUSH2 0x126 DUP2 PUSH2 0x12F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP POP PUSH2 0x3D4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28B DUP3 PUSH2 0x260 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29B DUP2 PUSH2 0x280 JUMP JUMPDEST DUP2 EQ PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B8 DUP2 PUSH2 0x292 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x2D3 PUSH2 0x25B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP5 DUP3 DUP6 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332 PUSH1 0x18 DUP4 PUSH2 0x2EB JUMP JUMPDEST SWAP2 POP PUSH2 0x33D DUP3 PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x361 DUP2 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39E PUSH1 0x17 DUP4 PUSH2 0x2EB JUMP JUMPDEST SWAP2 POP PUSH2 0x3A9 DUP3 PUSH2 0x368 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CD DUP2 PUSH2 0x391 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x65D DUP1 PUSH2 0x3E3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xA9 0xB2 PUSH16 0xF68EBEE96D178D08BB91561745CBEDE2 0xF8 DUP2 SWAP1 PUSH4 0x36A02460 MCOPY 0xF7 LOG2 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"240:141:3:-:0;;;298:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;355:8;373:1;618::4;598:22;;:8;:22;;;590:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:8;656:7;;:18;;;;;;;;;;;;;;;;;;708:1;684:26;;:12;:26;;;680:79;;720:32;739:12;720:18;;;:32;;:::i;:::-;680:79;481:282;;298:81:3;240:141;;1536:239:4;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;88:117:9:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:169::-;1286:11;1320:6;1315:3;1308:19;1360:4;1355:3;1351:14;1336:29;;1202:169;;;;:::o;1377:174::-;1517:26;1513:1;1505:6;1501:14;1494:50;1377:174;:::o;1557:366::-;1699:3;1720:67;1784:2;1779:3;1720:67;:::i;:::-;1713:74;;1796:93;1885:3;1796:93;:::i;:::-;1914:2;1909:3;1905:12;1898:19;;1557:366;;;:::o;1929:419::-;2095:4;2133:2;2122:9;2118:18;2110:26;;2182:9;2176:4;2172:20;2168:1;2157:9;2153:17;2146:47;2210:131;2336:4;2210:131;:::i;:::-;2202:139;;1929:419;;;:::o;2354:173::-;2494:25;2490:1;2482:6;2478:14;2471:49;2354:173;:::o;2533:366::-;2675:3;2696:67;2760:2;2755:3;2696:67;:::i;:::-;2689:74;;2772:93;2861:3;2772:93;:::i;:::-;2890:2;2885:3;2881:12;2874:19;;2533:366;;;:::o;2905:419::-;3071:4;3109:2;3098:9;3094:18;3086:26;;3158:9;3152:4;3148:20;3144:1;3133:9;3129:17;3122:47;3186:131;3312:4;3186:131;:::i;:::-;3178:139;;2905:419;;;:::o;240:141:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_229":{"entryPoint":748,"id":229,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_242":{"entryPoint":604,"id":242,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_195":{"entryPoint":138,"id":195,"parameterSlots":0,"returnSlots":0},"@owner_205":{"entryPoint":543,"id":205,"parameterSlots":0,"returnSlots":1},"@transferOwnership_159":{"entryPoint":584,"id":159,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":1168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1098,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1543,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1234,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1048,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1140,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4626:9","nodeType":"YulBlock","src":"0:4626:9","statements":[{"body":{"nativeSrc":"52:81:9","nodeType":"YulBlock","src":"52:81:9","statements":[{"nativeSrc":"62:65:9","nodeType":"YulAssignment","src":"62:65:9","value":{"arguments":[{"name":"value","nativeSrc":"77:5:9","nodeType":"YulIdentifier","src":"77:5:9"},{"kind":"number","nativeSrc":"84:42:9","nodeType":"YulLiteral","src":"84:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:9","nodeType":"YulIdentifier","src":"73:3:9"},"nativeSrc":"73:54:9","nodeType":"YulFunctionCall","src":"73:54:9"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:9","nodeType":"YulIdentifier","src":"62:7:9"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:9","nodeType":"YulTypedName","src":"34:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:9","nodeType":"YulTypedName","src":"44:7:9","type":""}],"src":"7:126:9"},{"body":{"nativeSrc":"184:51:9","nodeType":"YulBlock","src":"184:51:9","statements":[{"nativeSrc":"194:35:9","nodeType":"YulAssignment","src":"194:35:9","value":{"arguments":[{"name":"value","nativeSrc":"223:5:9","nodeType":"YulIdentifier","src":"223:5:9"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:9","nodeType":"YulIdentifier","src":"205:17:9"},"nativeSrc":"205:24:9","nodeType":"YulFunctionCall","src":"205:24:9"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:9","nodeType":"YulIdentifier","src":"194:7:9"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:9","nodeType":"YulTypedName","src":"166:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:9","nodeType":"YulTypedName","src":"176:7:9","type":""}],"src":"139:96:9"},{"body":{"nativeSrc":"306:53:9","nodeType":"YulBlock","src":"306:53:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:9","nodeType":"YulIdentifier","src":"323:3:9"},{"arguments":[{"name":"value","nativeSrc":"346:5:9","nodeType":"YulIdentifier","src":"346:5:9"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:9","nodeType":"YulIdentifier","src":"328:17:9"},"nativeSrc":"328:24:9","nodeType":"YulFunctionCall","src":"328:24:9"}],"functionName":{"name":"mstore","nativeSrc":"316:6:9","nodeType":"YulIdentifier","src":"316:6:9"},"nativeSrc":"316:37:9","nodeType":"YulFunctionCall","src":"316:37:9"},"nativeSrc":"316:37:9","nodeType":"YulExpressionStatement","src":"316:37:9"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:9","nodeType":"YulTypedName","src":"294:5:9","type":""},{"name":"pos","nativeSrc":"301:3:9","nodeType":"YulTypedName","src":"301:3:9","type":""}],"src":"241:118:9"},{"body":{"nativeSrc":"463:124:9","nodeType":"YulBlock","src":"463:124:9","statements":[{"nativeSrc":"473:26:9","nodeType":"YulAssignment","src":"473:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:9","nodeType":"YulIdentifier","src":"485:9:9"},{"kind":"number","nativeSrc":"496:2:9","nodeType":"YulLiteral","src":"496:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:9","nodeType":"YulIdentifier","src":"481:3:9"},"nativeSrc":"481:18:9","nodeType":"YulFunctionCall","src":"481:18:9"},"variableNames":[{"name":"tail","nativeSrc":"473:4:9","nodeType":"YulIdentifier","src":"473:4:9"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:9","nodeType":"YulIdentifier","src":"553:6:9"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:9","nodeType":"YulIdentifier","src":"566:9:9"},{"kind":"number","nativeSrc":"577:1:9","nodeType":"YulLiteral","src":"577:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:9","nodeType":"YulIdentifier","src":"562:3:9"},"nativeSrc":"562:17:9","nodeType":"YulFunctionCall","src":"562:17:9"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:9","nodeType":"YulIdentifier","src":"509:43:9"},"nativeSrc":"509:71:9","nodeType":"YulFunctionCall","src":"509:71:9"},"nativeSrc":"509:71:9","nodeType":"YulExpressionStatement","src":"509:71:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:9","nodeType":"YulTypedName","src":"435:9:9","type":""},{"name":"value0","nativeSrc":"447:6:9","nodeType":"YulTypedName","src":"447:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:9","nodeType":"YulTypedName","src":"458:4:9","type":""}],"src":"365:222:9"},{"body":{"nativeSrc":"633:35:9","nodeType":"YulBlock","src":"633:35:9","statements":[{"nativeSrc":"643:19:9","nodeType":"YulAssignment","src":"643:19:9","value":{"arguments":[{"kind":"number","nativeSrc":"659:2:9","nodeType":"YulLiteral","src":"659:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"653:5:9","nodeType":"YulIdentifier","src":"653:5:9"},"nativeSrc":"653:9:9","nodeType":"YulFunctionCall","src":"653:9:9"},"variableNames":[{"name":"memPtr","nativeSrc":"643:6:9","nodeType":"YulIdentifier","src":"643:6:9"}]}]},"name":"allocate_unbounded","nativeSrc":"593:75:9","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"626:6:9","nodeType":"YulTypedName","src":"626:6:9","type":""}],"src":"593:75:9"},{"body":{"nativeSrc":"763:28:9","nodeType":"YulBlock","src":"763:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"780:1:9","nodeType":"YulLiteral","src":"780:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"783:1:9","nodeType":"YulLiteral","src":"783:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"773:6:9","nodeType":"YulIdentifier","src":"773:6:9"},"nativeSrc":"773:12:9","nodeType":"YulFunctionCall","src":"773:12:9"},"nativeSrc":"773:12:9","nodeType":"YulExpressionStatement","src":"773:12:9"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"674:117:9","nodeType":"YulFunctionDefinition","src":"674:117:9"},{"body":{"nativeSrc":"886:28:9","nodeType":"YulBlock","src":"886:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:9","nodeType":"YulLiteral","src":"903:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"906:1:9","nodeType":"YulLiteral","src":"906:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"896:6:9","nodeType":"YulIdentifier","src":"896:6:9"},"nativeSrc":"896:12:9","nodeType":"YulFunctionCall","src":"896:12:9"},"nativeSrc":"896:12:9","nodeType":"YulExpressionStatement","src":"896:12:9"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"797:117:9","nodeType":"YulFunctionDefinition","src":"797:117:9"},{"body":{"nativeSrc":"963:79:9","nodeType":"YulBlock","src":"963:79:9","statements":[{"body":{"nativeSrc":"1020:16:9","nodeType":"YulBlock","src":"1020:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1029:1:9","nodeType":"YulLiteral","src":"1029:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1032:1:9","nodeType":"YulLiteral","src":"1032:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1022:6:9","nodeType":"YulIdentifier","src":"1022:6:9"},"nativeSrc":"1022:12:9","nodeType":"YulFunctionCall","src":"1022:12:9"},"nativeSrc":"1022:12:9","nodeType":"YulExpressionStatement","src":"1022:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"986:5:9","nodeType":"YulIdentifier","src":"986:5:9"},{"arguments":[{"name":"value","nativeSrc":"1011:5:9","nodeType":"YulIdentifier","src":"1011:5:9"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"993:17:9","nodeType":"YulIdentifier","src":"993:17:9"},"nativeSrc":"993:24:9","nodeType":"YulFunctionCall","src":"993:24:9"}],"functionName":{"name":"eq","nativeSrc":"983:2:9","nodeType":"YulIdentifier","src":"983:2:9"},"nativeSrc":"983:35:9","nodeType":"YulFunctionCall","src":"983:35:9"}],"functionName":{"name":"iszero","nativeSrc":"976:6:9","nodeType":"YulIdentifier","src":"976:6:9"},"nativeSrc":"976:43:9","nodeType":"YulFunctionCall","src":"976:43:9"},"nativeSrc":"973:63:9","nodeType":"YulIf","src":"973:63:9"}]},"name":"validator_revert_t_address","nativeSrc":"920:122:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"956:5:9","nodeType":"YulTypedName","src":"956:5:9","type":""}],"src":"920:122:9"},{"body":{"nativeSrc":"1100:87:9","nodeType":"YulBlock","src":"1100:87:9","statements":[{"nativeSrc":"1110:29:9","nodeType":"YulAssignment","src":"1110:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"1132:6:9","nodeType":"YulIdentifier","src":"1132:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"1119:12:9","nodeType":"YulIdentifier","src":"1119:12:9"},"nativeSrc":"1119:20:9","nodeType":"YulFunctionCall","src":"1119:20:9"},"variableNames":[{"name":"value","nativeSrc":"1110:5:9","nodeType":"YulIdentifier","src":"1110:5:9"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1175:5:9","nodeType":"YulIdentifier","src":"1175:5:9"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"1148:26:9","nodeType":"YulIdentifier","src":"1148:26:9"},"nativeSrc":"1148:33:9","nodeType":"YulFunctionCall","src":"1148:33:9"},"nativeSrc":"1148:33:9","nodeType":"YulExpressionStatement","src":"1148:33:9"}]},"name":"abi_decode_t_address","nativeSrc":"1048:139:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1078:6:9","nodeType":"YulTypedName","src":"1078:6:9","type":""},{"name":"end","nativeSrc":"1086:3:9","nodeType":"YulTypedName","src":"1086:3:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1094:5:9","nodeType":"YulTypedName","src":"1094:5:9","type":""}],"src":"1048:139:9"},{"body":{"nativeSrc":"1259:263:9","nodeType":"YulBlock","src":"1259:263:9","statements":[{"body":{"nativeSrc":"1305:83:9","nodeType":"YulBlock","src":"1305:83:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1307:77:9","nodeType":"YulIdentifier","src":"1307:77:9"},"nativeSrc":"1307:79:9","nodeType":"YulFunctionCall","src":"1307:79:9"},"nativeSrc":"1307:79:9","nodeType":"YulExpressionStatement","src":"1307:79:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1280:7:9","nodeType":"YulIdentifier","src":"1280:7:9"},{"name":"headStart","nativeSrc":"1289:9:9","nodeType":"YulIdentifier","src":"1289:9:9"}],"functionName":{"name":"sub","nativeSrc":"1276:3:9","nodeType":"YulIdentifier","src":"1276:3:9"},"nativeSrc":"1276:23:9","nodeType":"YulFunctionCall","src":"1276:23:9"},{"kind":"number","nativeSrc":"1301:2:9","nodeType":"YulLiteral","src":"1301:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1272:3:9","nodeType":"YulIdentifier","src":"1272:3:9"},"nativeSrc":"1272:32:9","nodeType":"YulFunctionCall","src":"1272:32:9"},"nativeSrc":"1269:119:9","nodeType":"YulIf","src":"1269:119:9"},{"nativeSrc":"1398:117:9","nodeType":"YulBlock","src":"1398:117:9","statements":[{"nativeSrc":"1413:15:9","nodeType":"YulVariableDeclaration","src":"1413:15:9","value":{"kind":"number","nativeSrc":"1427:1:9","nodeType":"YulLiteral","src":"1427:1:9","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1417:6:9","nodeType":"YulTypedName","src":"1417:6:9","type":""}]},{"nativeSrc":"1442:63:9","nodeType":"YulAssignment","src":"1442:63:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1477:9:9","nodeType":"YulIdentifier","src":"1477:9:9"},{"name":"offset","nativeSrc":"1488:6:9","nodeType":"YulIdentifier","src":"1488:6:9"}],"functionName":{"name":"add","nativeSrc":"1473:3:9","nodeType":"YulIdentifier","src":"1473:3:9"},"nativeSrc":"1473:22:9","nodeType":"YulFunctionCall","src":"1473:22:9"},{"name":"dataEnd","nativeSrc":"1497:7:9","nodeType":"YulIdentifier","src":"1497:7:9"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1452:20:9","nodeType":"YulIdentifier","src":"1452:20:9"},"nativeSrc":"1452:53:9","nodeType":"YulFunctionCall","src":"1452:53:9"},"variableNames":[{"name":"value0","nativeSrc":"1442:6:9","nodeType":"YulIdentifier","src":"1442:6:9"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1193:329:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1229:9:9","nodeType":"YulTypedName","src":"1229:9:9","type":""},{"name":"dataEnd","nativeSrc":"1240:7:9","nodeType":"YulTypedName","src":"1240:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1252:6:9","nodeType":"YulTypedName","src":"1252:6:9","type":""}],"src":"1193:329:9"},{"body":{"nativeSrc":"1624:73:9","nodeType":"YulBlock","src":"1624:73:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1641:3:9","nodeType":"YulIdentifier","src":"1641:3:9"},{"name":"length","nativeSrc":"1646:6:9","nodeType":"YulIdentifier","src":"1646:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1634:6:9","nodeType":"YulIdentifier","src":"1634:6:9"},"nativeSrc":"1634:19:9","nodeType":"YulFunctionCall","src":"1634:19:9"},"nativeSrc":"1634:19:9","nodeType":"YulExpressionStatement","src":"1634:19:9"},{"nativeSrc":"1662:29:9","nodeType":"YulAssignment","src":"1662:29:9","value":{"arguments":[{"name":"pos","nativeSrc":"1681:3:9","nodeType":"YulIdentifier","src":"1681:3:9"},{"kind":"number","nativeSrc":"1686:4:9","nodeType":"YulLiteral","src":"1686:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1677:3:9","nodeType":"YulIdentifier","src":"1677:3:9"},"nativeSrc":"1677:14:9","nodeType":"YulFunctionCall","src":"1677:14:9"},"variableNames":[{"name":"updated_pos","nativeSrc":"1662:11:9","nodeType":"YulIdentifier","src":"1662:11:9"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1528:169:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1596:3:9","nodeType":"YulTypedName","src":"1596:3:9","type":""},{"name":"length","nativeSrc":"1601:6:9","nodeType":"YulTypedName","src":"1601:6:9","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1612:11:9","nodeType":"YulTypedName","src":"1612:11:9","type":""}],"src":"1528:169:9"},{"body":{"nativeSrc":"1809:66:9","nodeType":"YulBlock","src":"1809:66:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1831:6:9","nodeType":"YulIdentifier","src":"1831:6:9"},{"kind":"number","nativeSrc":"1839:1:9","nodeType":"YulLiteral","src":"1839:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1827:3:9","nodeType":"YulIdentifier","src":"1827:3:9"},"nativeSrc":"1827:14:9","nodeType":"YulFunctionCall","src":"1827:14:9"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nativeSrc":"1843:24:9","nodeType":"YulLiteral","src":"1843:24:9","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nativeSrc":"1820:6:9","nodeType":"YulIdentifier","src":"1820:6:9"},"nativeSrc":"1820:48:9","nodeType":"YulFunctionCall","src":"1820:48:9"},"nativeSrc":"1820:48:9","nodeType":"YulExpressionStatement","src":"1820:48:9"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"1703:172:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1801:6:9","nodeType":"YulTypedName","src":"1801:6:9","type":""}],"src":"1703:172:9"},{"body":{"nativeSrc":"2027:220:9","nodeType":"YulBlock","src":"2027:220:9","statements":[{"nativeSrc":"2037:74:9","nodeType":"YulAssignment","src":"2037:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"2103:3:9","nodeType":"YulIdentifier","src":"2103:3:9"},{"kind":"number","nativeSrc":"2108:2:9","nodeType":"YulLiteral","src":"2108:2:9","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2044:58:9","nodeType":"YulIdentifier","src":"2044:58:9"},"nativeSrc":"2044:67:9","nodeType":"YulFunctionCall","src":"2044:67:9"},"variableNames":[{"name":"pos","nativeSrc":"2037:3:9","nodeType":"YulIdentifier","src":"2037:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2209:3:9","nodeType":"YulIdentifier","src":"2209:3:9"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"2120:88:9","nodeType":"YulIdentifier","src":"2120:88:9"},"nativeSrc":"2120:93:9","nodeType":"YulFunctionCall","src":"2120:93:9"},"nativeSrc":"2120:93:9","nodeType":"YulExpressionStatement","src":"2120:93:9"},{"nativeSrc":"2222:19:9","nodeType":"YulAssignment","src":"2222:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"2233:3:9","nodeType":"YulIdentifier","src":"2233:3:9"},{"kind":"number","nativeSrc":"2238:2:9","nodeType":"YulLiteral","src":"2238:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2229:3:9","nodeType":"YulIdentifier","src":"2229:3:9"},"nativeSrc":"2229:12:9","nodeType":"YulFunctionCall","src":"2229:12:9"},"variableNames":[{"name":"end","nativeSrc":"2222:3:9","nodeType":"YulIdentifier","src":"2222:3:9"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"1881:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2015:3:9","nodeType":"YulTypedName","src":"2015:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2023:3:9","nodeType":"YulTypedName","src":"2023:3:9","type":""}],"src":"1881:366:9"},{"body":{"nativeSrc":"2424:248:9","nodeType":"YulBlock","src":"2424:248:9","statements":[{"nativeSrc":"2434:26:9","nodeType":"YulAssignment","src":"2434:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"2446:9:9","nodeType":"YulIdentifier","src":"2446:9:9"},{"kind":"number","nativeSrc":"2457:2:9","nodeType":"YulLiteral","src":"2457:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2442:3:9","nodeType":"YulIdentifier","src":"2442:3:9"},"nativeSrc":"2442:18:9","nodeType":"YulFunctionCall","src":"2442:18:9"},"variableNames":[{"name":"tail","nativeSrc":"2434:4:9","nodeType":"YulIdentifier","src":"2434:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2481:9:9","nodeType":"YulIdentifier","src":"2481:9:9"},{"kind":"number","nativeSrc":"2492:1:9","nodeType":"YulLiteral","src":"2492:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2477:3:9","nodeType":"YulIdentifier","src":"2477:3:9"},"nativeSrc":"2477:17:9","nodeType":"YulFunctionCall","src":"2477:17:9"},{"arguments":[{"name":"tail","nativeSrc":"2500:4:9","nodeType":"YulIdentifier","src":"2500:4:9"},{"name":"headStart","nativeSrc":"2506:9:9","nodeType":"YulIdentifier","src":"2506:9:9"}],"functionName":{"name":"sub","nativeSrc":"2496:3:9","nodeType":"YulIdentifier","src":"2496:3:9"},"nativeSrc":"2496:20:9","nodeType":"YulFunctionCall","src":"2496:20:9"}],"functionName":{"name":"mstore","nativeSrc":"2470:6:9","nodeType":"YulIdentifier","src":"2470:6:9"},"nativeSrc":"2470:47:9","nodeType":"YulFunctionCall","src":"2470:47:9"},"nativeSrc":"2470:47:9","nodeType":"YulExpressionStatement","src":"2470:47:9"},{"nativeSrc":"2526:139:9","nodeType":"YulAssignment","src":"2526:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"2660:4:9","nodeType":"YulIdentifier","src":"2660:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"2534:124:9","nodeType":"YulIdentifier","src":"2534:124:9"},"nativeSrc":"2534:131:9","nodeType":"YulFunctionCall","src":"2534:131:9"},"variableNames":[{"name":"tail","nativeSrc":"2526:4:9","nodeType":"YulIdentifier","src":"2526:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2253:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2404:9:9","nodeType":"YulTypedName","src":"2404:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2419:4:9","nodeType":"YulTypedName","src":"2419:4:9","type":""}],"src":"2253:419:9"},{"body":{"nativeSrc":"2784:66:9","nodeType":"YulBlock","src":"2784:66:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2806:6:9","nodeType":"YulIdentifier","src":"2806:6:9"},{"kind":"number","nativeSrc":"2814:1:9","nodeType":"YulLiteral","src":"2814:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2802:3:9","nodeType":"YulIdentifier","src":"2802:3:9"},"nativeSrc":"2802:14:9","nodeType":"YulFunctionCall","src":"2802:14:9"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nativeSrc":"2818:24:9","nodeType":"YulLiteral","src":"2818:24:9","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nativeSrc":"2795:6:9","nodeType":"YulIdentifier","src":"2795:6:9"},"nativeSrc":"2795:48:9","nodeType":"YulFunctionCall","src":"2795:48:9"},"nativeSrc":"2795:48:9","nodeType":"YulExpressionStatement","src":"2795:48:9"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"2678:172:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2776:6:9","nodeType":"YulTypedName","src":"2776:6:9","type":""}],"src":"2678:172:9"},{"body":{"nativeSrc":"3002:220:9","nodeType":"YulBlock","src":"3002:220:9","statements":[{"nativeSrc":"3012:74:9","nodeType":"YulAssignment","src":"3012:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"3078:3:9","nodeType":"YulIdentifier","src":"3078:3:9"},{"kind":"number","nativeSrc":"3083:2:9","nodeType":"YulLiteral","src":"3083:2:9","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3019:58:9","nodeType":"YulIdentifier","src":"3019:58:9"},"nativeSrc":"3019:67:9","nodeType":"YulFunctionCall","src":"3019:67:9"},"variableNames":[{"name":"pos","nativeSrc":"3012:3:9","nodeType":"YulIdentifier","src":"3012:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3184:3:9","nodeType":"YulIdentifier","src":"3184:3:9"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"3095:88:9","nodeType":"YulIdentifier","src":"3095:88:9"},"nativeSrc":"3095:93:9","nodeType":"YulFunctionCall","src":"3095:93:9"},"nativeSrc":"3095:93:9","nodeType":"YulExpressionStatement","src":"3095:93:9"},{"nativeSrc":"3197:19:9","nodeType":"YulAssignment","src":"3197:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"3208:3:9","nodeType":"YulIdentifier","src":"3208:3:9"},{"kind":"number","nativeSrc":"3213:2:9","nodeType":"YulLiteral","src":"3213:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3204:3:9","nodeType":"YulIdentifier","src":"3204:3:9"},"nativeSrc":"3204:12:9","nodeType":"YulFunctionCall","src":"3204:12:9"},"variableNames":[{"name":"end","nativeSrc":"3197:3:9","nodeType":"YulIdentifier","src":"3197:3:9"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"2856:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2990:3:9","nodeType":"YulTypedName","src":"2990:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2998:3:9","nodeType":"YulTypedName","src":"2998:3:9","type":""}],"src":"2856:366:9"},{"body":{"nativeSrc":"3399:248:9","nodeType":"YulBlock","src":"3399:248:9","statements":[{"nativeSrc":"3409:26:9","nodeType":"YulAssignment","src":"3409:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"3421:9:9","nodeType":"YulIdentifier","src":"3421:9:9"},{"kind":"number","nativeSrc":"3432:2:9","nodeType":"YulLiteral","src":"3432:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3417:3:9","nodeType":"YulIdentifier","src":"3417:3:9"},"nativeSrc":"3417:18:9","nodeType":"YulFunctionCall","src":"3417:18:9"},"variableNames":[{"name":"tail","nativeSrc":"3409:4:9","nodeType":"YulIdentifier","src":"3409:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3456:9:9","nodeType":"YulIdentifier","src":"3456:9:9"},{"kind":"number","nativeSrc":"3467:1:9","nodeType":"YulLiteral","src":"3467:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3452:3:9","nodeType":"YulIdentifier","src":"3452:3:9"},"nativeSrc":"3452:17:9","nodeType":"YulFunctionCall","src":"3452:17:9"},{"arguments":[{"name":"tail","nativeSrc":"3475:4:9","nodeType":"YulIdentifier","src":"3475:4:9"},{"name":"headStart","nativeSrc":"3481:9:9","nodeType":"YulIdentifier","src":"3481:9:9"}],"functionName":{"name":"sub","nativeSrc":"3471:3:9","nodeType":"YulIdentifier","src":"3471:3:9"},"nativeSrc":"3471:20:9","nodeType":"YulFunctionCall","src":"3471:20:9"}],"functionName":{"name":"mstore","nativeSrc":"3445:6:9","nodeType":"YulIdentifier","src":"3445:6:9"},"nativeSrc":"3445:47:9","nodeType":"YulFunctionCall","src":"3445:47:9"},"nativeSrc":"3445:47:9","nodeType":"YulExpressionStatement","src":"3445:47:9"},{"nativeSrc":"3501:139:9","nodeType":"YulAssignment","src":"3501:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"3635:4:9","nodeType":"YulIdentifier","src":"3635:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"3509:124:9","nodeType":"YulIdentifier","src":"3509:124:9"},"nativeSrc":"3509:131:9","nodeType":"YulFunctionCall","src":"3509:131:9"},"variableNames":[{"name":"tail","nativeSrc":"3501:4:9","nodeType":"YulIdentifier","src":"3501:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3228:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3379:9:9","nodeType":"YulTypedName","src":"3379:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3394:4:9","nodeType":"YulTypedName","src":"3394:4:9","type":""}],"src":"3228:419:9"},{"body":{"nativeSrc":"3759:67:9","nodeType":"YulBlock","src":"3759:67:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"3781:6:9","nodeType":"YulIdentifier","src":"3781:6:9"},{"kind":"number","nativeSrc":"3789:1:9","nodeType":"YulLiteral","src":"3789:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3777:3:9","nodeType":"YulIdentifier","src":"3777:3:9"},"nativeSrc":"3777:14:9","nodeType":"YulFunctionCall","src":"3777:14:9"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"3793:25:9","nodeType":"YulLiteral","src":"3793:25:9","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"3770:6:9","nodeType":"YulIdentifier","src":"3770:6:9"},"nativeSrc":"3770:49:9","nodeType":"YulFunctionCall","src":"3770:49:9"},"nativeSrc":"3770:49:9","nodeType":"YulExpressionStatement","src":"3770:49:9"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"3653:173:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"3751:6:9","nodeType":"YulTypedName","src":"3751:6:9","type":""}],"src":"3653:173:9"},{"body":{"nativeSrc":"3978:220:9","nodeType":"YulBlock","src":"3978:220:9","statements":[{"nativeSrc":"3988:74:9","nodeType":"YulAssignment","src":"3988:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"4054:3:9","nodeType":"YulIdentifier","src":"4054:3:9"},{"kind":"number","nativeSrc":"4059:2:9","nodeType":"YulLiteral","src":"4059:2:9","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3995:58:9","nodeType":"YulIdentifier","src":"3995:58:9"},"nativeSrc":"3995:67:9","nodeType":"YulFunctionCall","src":"3995:67:9"},"variableNames":[{"name":"pos","nativeSrc":"3988:3:9","nodeType":"YulIdentifier","src":"3988:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4160:3:9","nodeType":"YulIdentifier","src":"4160:3:9"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"4071:88:9","nodeType":"YulIdentifier","src":"4071:88:9"},"nativeSrc":"4071:93:9","nodeType":"YulFunctionCall","src":"4071:93:9"},"nativeSrc":"4071:93:9","nodeType":"YulExpressionStatement","src":"4071:93:9"},{"nativeSrc":"4173:19:9","nodeType":"YulAssignment","src":"4173:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"4184:3:9","nodeType":"YulIdentifier","src":"4184:3:9"},{"kind":"number","nativeSrc":"4189:2:9","nodeType":"YulLiteral","src":"4189:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4180:3:9","nodeType":"YulIdentifier","src":"4180:3:9"},"nativeSrc":"4180:12:9","nodeType":"YulFunctionCall","src":"4180:12:9"},"variableNames":[{"name":"end","nativeSrc":"4173:3:9","nodeType":"YulIdentifier","src":"4173:3:9"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3832:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"3966:3:9","nodeType":"YulTypedName","src":"3966:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3974:3:9","nodeType":"YulTypedName","src":"3974:3:9","type":""}],"src":"3832:366:9"},{"body":{"nativeSrc":"4375:248:9","nodeType":"YulBlock","src":"4375:248:9","statements":[{"nativeSrc":"4385:26:9","nodeType":"YulAssignment","src":"4385:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"4397:9:9","nodeType":"YulIdentifier","src":"4397:9:9"},{"kind":"number","nativeSrc":"4408:2:9","nodeType":"YulLiteral","src":"4408:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4393:3:9","nodeType":"YulIdentifier","src":"4393:3:9"},"nativeSrc":"4393:18:9","nodeType":"YulFunctionCall","src":"4393:18:9"},"variableNames":[{"name":"tail","nativeSrc":"4385:4:9","nodeType":"YulIdentifier","src":"4385:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4432:9:9","nodeType":"YulIdentifier","src":"4432:9:9"},{"kind":"number","nativeSrc":"4443:1:9","nodeType":"YulLiteral","src":"4443:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4428:3:9","nodeType":"YulIdentifier","src":"4428:3:9"},"nativeSrc":"4428:17:9","nodeType":"YulFunctionCall","src":"4428:17:9"},{"arguments":[{"name":"tail","nativeSrc":"4451:4:9","nodeType":"YulIdentifier","src":"4451:4:9"},{"name":"headStart","nativeSrc":"4457:9:9","nodeType":"YulIdentifier","src":"4457:9:9"}],"functionName":{"name":"sub","nativeSrc":"4447:3:9","nodeType":"YulIdentifier","src":"4447:3:9"},"nativeSrc":"4447:20:9","nodeType":"YulFunctionCall","src":"4447:20:9"}],"functionName":{"name":"mstore","nativeSrc":"4421:6:9","nodeType":"YulIdentifier","src":"4421:6:9"},"nativeSrc":"4421:47:9","nodeType":"YulFunctionCall","src":"4421:47:9"},"nativeSrc":"4421:47:9","nodeType":"YulExpressionStatement","src":"4421:47:9"},{"nativeSrc":"4477:139:9","nodeType":"YulAssignment","src":"4477:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"4611:4:9","nodeType":"YulIdentifier","src":"4611:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"4485:124:9","nodeType":"YulIdentifier","src":"4485:124:9"},"nativeSrc":"4485:131:9","nodeType":"YulFunctionCall","src":"4485:131:9"},"variableNames":[{"name":"tail","nativeSrc":"4477:4:9","nodeType":"YulIdentifier","src":"4477:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4204:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4355:9:9","nodeType":"YulTypedName","src":"4355:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4370:4:9","nodeType":"YulTypedName","src":"4370:4:9","type":""}],"src":"4204:419:9"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea264697066735822122096a9b26ff68ebee96d178d08bb91561745cbede2f881906336a024605ef7a2c464736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xA9 0xB2 PUSH16 0xF68EBEE96D178D08BB91561745CBEDE2 0xF8 DUP2 SWAP1 PUSH4 0x36A02460 MCOPY 0xF7 LOG2 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"240:141:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:316:4;;;:::i;:::-;;1382:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;847:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1026:316;1150:14;;;;;;;;;;;1136:28;;:10;:28;;;1128:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1198:16;1217:7;;;;;;;;;;;1198:26;;1240:10;1230:7;;:20;;;;;;;;;;;;;;;;;;1281:1;1256:14;;:27;;;;;;;;;;;;;;;;;;1326:10;1295:42;;1316:8;1295:42;;;;;;;;;;;;1071:271;1026:316::o;1382:81::-;1429:7;1451;;;;;;;;;;;1444:14;;1382:81;:::o;847:98::-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;;;;;;;;;1918:21;;:10;:21;;;1910:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1809:162::o;1536:239::-;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;7:126:9:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:169::-;1612:11;1646:6;1641:3;1634:19;1686:4;1681:3;1677:14;1662:29;;1528:169;;;;:::o;1703:172::-;1843:24;1839:1;1831:6;1827:14;1820:48;1703:172;:::o;1881:366::-;2023:3;2044:67;2108:2;2103:3;2044:67;:::i;:::-;2037:74;;2120:93;2209:3;2120:93;:::i;:::-;2238:2;2233:3;2229:12;2222:19;;1881:366;;;:::o;2253:419::-;2419:4;2457:2;2446:9;2442:18;2434:26;;2506:9;2500:4;2496:20;2492:1;2481:9;2477:17;2470:47;2534:131;2660:4;2534:131;:::i;:::-;2526:139;;2253:419;;;:::o;2678:172::-;2818:24;2814:1;2806:6;2802:14;2795:48;2678:172;:::o;2856:366::-;2998:3;3019:67;3083:2;3078:3;3019:67;:::i;:::-;3012:74;;3095:93;3184:3;3095:93;:::i;:::-;3213:2;3208:3;3204:12;3197:19;;2856:366;;;:::o;3228:419::-;3394:4;3432:2;3421:9;3417:18;3409:26;;3481:9;3475:4;3471:20;3467:1;3456:9;3452:17;3445:47;3509:131;3635:4;3509:131;:::i;:::-;3501:139;;3228:419;;;:::o;3653:173::-;3793:25;3789:1;3781:6;3777:14;3770:49;3653:173;:::o;3832:366::-;3974:3;3995:67;4059:2;4054:3;3995:67;:::i;:::-;3988:74;;4071:93;4160:3;4071:93;:::i;:::-;4189:2;4184:3;4180:12;4173:19;;3832:366;;;:::o;4204:419::-;4370:4;4408:2;4397:9;4393:18;4385:26;;4457:9;4451:4;4447:20;4443:1;4432:9;4428:17;4421:47;4485:131;4611:4;4485:131;:::i;:::-;4477:139;;4204:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54518","owner()":"2522","transferOwnership(address)":"30676"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":\"ConfirmedOwner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":97,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":99,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ConfirmedOwnerWithProposal":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"address","name":"pendingOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_145":{"entryPoint":null,"id":145,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_229":{"entryPoint":300,"id":229,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":678,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":699,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":821,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":929,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":856,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":964,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":763,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":637,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":605,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":600,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":780,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":888,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":655,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3483:9","nodeType":"YulBlock","src":"0:3483:9","statements":[{"body":{"nativeSrc":"47:35:9","nodeType":"YulBlock","src":"47:35:9","statements":[{"nativeSrc":"57:19:9","nodeType":"YulAssignment","src":"57:19:9","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:9","nodeType":"YulLiteral","src":"73:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:9","nodeType":"YulIdentifier","src":"67:5:9"},"nativeSrc":"67:9:9","nodeType":"YulFunctionCall","src":"67:9:9"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:9","nodeType":"YulIdentifier","src":"57:6:9"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:9","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:9","nodeType":"YulTypedName","src":"40:6:9","type":""}],"src":"7:75:9"},{"body":{"nativeSrc":"177:28:9","nodeType":"YulBlock","src":"177:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:9","nodeType":"YulLiteral","src":"194:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:9","nodeType":"YulLiteral","src":"197:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:9","nodeType":"YulIdentifier","src":"187:6:9"},"nativeSrc":"187:12:9","nodeType":"YulFunctionCall","src":"187:12:9"},"nativeSrc":"187:12:9","nodeType":"YulExpressionStatement","src":"187:12:9"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:9","nodeType":"YulFunctionDefinition","src":"88:117:9"},{"body":{"nativeSrc":"300:28:9","nodeType":"YulBlock","src":"300:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:9","nodeType":"YulLiteral","src":"317:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:9","nodeType":"YulLiteral","src":"320:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:9","nodeType":"YulIdentifier","src":"310:6:9"},"nativeSrc":"310:12:9","nodeType":"YulFunctionCall","src":"310:12:9"},"nativeSrc":"310:12:9","nodeType":"YulExpressionStatement","src":"310:12:9"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:9","nodeType":"YulFunctionDefinition","src":"211:117:9"},{"body":{"nativeSrc":"379:81:9","nodeType":"YulBlock","src":"379:81:9","statements":[{"nativeSrc":"389:65:9","nodeType":"YulAssignment","src":"389:65:9","value":{"arguments":[{"name":"value","nativeSrc":"404:5:9","nodeType":"YulIdentifier","src":"404:5:9"},{"kind":"number","nativeSrc":"411:42:9","nodeType":"YulLiteral","src":"411:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:9","nodeType":"YulIdentifier","src":"400:3:9"},"nativeSrc":"400:54:9","nodeType":"YulFunctionCall","src":"400:54:9"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:9","nodeType":"YulIdentifier","src":"389:7:9"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:9","nodeType":"YulTypedName","src":"361:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:9","nodeType":"YulTypedName","src":"371:7:9","type":""}],"src":"334:126:9"},{"body":{"nativeSrc":"511:51:9","nodeType":"YulBlock","src":"511:51:9","statements":[{"nativeSrc":"521:35:9","nodeType":"YulAssignment","src":"521:35:9","value":{"arguments":[{"name":"value","nativeSrc":"550:5:9","nodeType":"YulIdentifier","src":"550:5:9"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:9","nodeType":"YulIdentifier","src":"532:17:9"},"nativeSrc":"532:24:9","nodeType":"YulFunctionCall","src":"532:24:9"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:9","nodeType":"YulIdentifier","src":"521:7:9"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:9","nodeType":"YulTypedName","src":"493:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:9","nodeType":"YulTypedName","src":"503:7:9","type":""}],"src":"466:96:9"},{"body":{"nativeSrc":"611:79:9","nodeType":"YulBlock","src":"611:79:9","statements":[{"body":{"nativeSrc":"668:16:9","nodeType":"YulBlock","src":"668:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:9","nodeType":"YulLiteral","src":"677:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:9","nodeType":"YulLiteral","src":"680:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:9","nodeType":"YulIdentifier","src":"670:6:9"},"nativeSrc":"670:12:9","nodeType":"YulFunctionCall","src":"670:12:9"},"nativeSrc":"670:12:9","nodeType":"YulExpressionStatement","src":"670:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:9","nodeType":"YulIdentifier","src":"634:5:9"},{"arguments":[{"name":"value","nativeSrc":"659:5:9","nodeType":"YulIdentifier","src":"659:5:9"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:9","nodeType":"YulIdentifier","src":"641:17:9"},"nativeSrc":"641:24:9","nodeType":"YulFunctionCall","src":"641:24:9"}],"functionName":{"name":"eq","nativeSrc":"631:2:9","nodeType":"YulIdentifier","src":"631:2:9"},"nativeSrc":"631:35:9","nodeType":"YulFunctionCall","src":"631:35:9"}],"functionName":{"name":"iszero","nativeSrc":"624:6:9","nodeType":"YulIdentifier","src":"624:6:9"},"nativeSrc":"624:43:9","nodeType":"YulFunctionCall","src":"624:43:9"},"nativeSrc":"621:63:9","nodeType":"YulIf","src":"621:63:9"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:9","nodeType":"YulTypedName","src":"604:5:9","type":""}],"src":"568:122:9"},{"body":{"nativeSrc":"759:80:9","nodeType":"YulBlock","src":"759:80:9","statements":[{"nativeSrc":"769:22:9","nodeType":"YulAssignment","src":"769:22:9","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:9","nodeType":"YulIdentifier","src":"784:6:9"}],"functionName":{"name":"mload","nativeSrc":"778:5:9","nodeType":"YulIdentifier","src":"778:5:9"},"nativeSrc":"778:13:9","nodeType":"YulFunctionCall","src":"778:13:9"},"variableNames":[{"name":"value","nativeSrc":"769:5:9","nodeType":"YulIdentifier","src":"769:5:9"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:9","nodeType":"YulIdentifier","src":"827:5:9"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:9","nodeType":"YulIdentifier","src":"800:26:9"},"nativeSrc":"800:33:9","nodeType":"YulFunctionCall","src":"800:33:9"},"nativeSrc":"800:33:9","nodeType":"YulExpressionStatement","src":"800:33:9"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:9","nodeType":"YulTypedName","src":"737:6:9","type":""},{"name":"end","nativeSrc":"745:3:9","nodeType":"YulTypedName","src":"745:3:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:9","nodeType":"YulTypedName","src":"753:5:9","type":""}],"src":"696:143:9"},{"body":{"nativeSrc":"939:413:9","nodeType":"YulBlock","src":"939:413:9","statements":[{"body":{"nativeSrc":"985:83:9","nodeType":"YulBlock","src":"985:83:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"987:77:9","nodeType":"YulIdentifier","src":"987:77:9"},"nativeSrc":"987:79:9","nodeType":"YulFunctionCall","src":"987:79:9"},"nativeSrc":"987:79:9","nodeType":"YulExpressionStatement","src":"987:79:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"960:7:9","nodeType":"YulIdentifier","src":"960:7:9"},{"name":"headStart","nativeSrc":"969:9:9","nodeType":"YulIdentifier","src":"969:9:9"}],"functionName":{"name":"sub","nativeSrc":"956:3:9","nodeType":"YulIdentifier","src":"956:3:9"},"nativeSrc":"956:23:9","nodeType":"YulFunctionCall","src":"956:23:9"},{"kind":"number","nativeSrc":"981:2:9","nodeType":"YulLiteral","src":"981:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"952:3:9","nodeType":"YulIdentifier","src":"952:3:9"},"nativeSrc":"952:32:9","nodeType":"YulFunctionCall","src":"952:32:9"},"nativeSrc":"949:119:9","nodeType":"YulIf","src":"949:119:9"},{"nativeSrc":"1078:128:9","nodeType":"YulBlock","src":"1078:128:9","statements":[{"nativeSrc":"1093:15:9","nodeType":"YulVariableDeclaration","src":"1093:15:9","value":{"kind":"number","nativeSrc":"1107:1:9","nodeType":"YulLiteral","src":"1107:1:9","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1097:6:9","nodeType":"YulTypedName","src":"1097:6:9","type":""}]},{"nativeSrc":"1122:74:9","nodeType":"YulAssignment","src":"1122:74:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1168:9:9","nodeType":"YulIdentifier","src":"1168:9:9"},{"name":"offset","nativeSrc":"1179:6:9","nodeType":"YulIdentifier","src":"1179:6:9"}],"functionName":{"name":"add","nativeSrc":"1164:3:9","nodeType":"YulIdentifier","src":"1164:3:9"},"nativeSrc":"1164:22:9","nodeType":"YulFunctionCall","src":"1164:22:9"},{"name":"dataEnd","nativeSrc":"1188:7:9","nodeType":"YulIdentifier","src":"1188:7:9"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1132:31:9","nodeType":"YulIdentifier","src":"1132:31:9"},"nativeSrc":"1132:64:9","nodeType":"YulFunctionCall","src":"1132:64:9"},"variableNames":[{"name":"value0","nativeSrc":"1122:6:9","nodeType":"YulIdentifier","src":"1122:6:9"}]}]},{"nativeSrc":"1216:129:9","nodeType":"YulBlock","src":"1216:129:9","statements":[{"nativeSrc":"1231:16:9","nodeType":"YulVariableDeclaration","src":"1231:16:9","value":{"kind":"number","nativeSrc":"1245:2:9","nodeType":"YulLiteral","src":"1245:2:9","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"1235:6:9","nodeType":"YulTypedName","src":"1235:6:9","type":""}]},{"nativeSrc":"1261:74:9","nodeType":"YulAssignment","src":"1261:74:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1307:9:9","nodeType":"YulIdentifier","src":"1307:9:9"},{"name":"offset","nativeSrc":"1318:6:9","nodeType":"YulIdentifier","src":"1318:6:9"}],"functionName":{"name":"add","nativeSrc":"1303:3:9","nodeType":"YulIdentifier","src":"1303:3:9"},"nativeSrc":"1303:22:9","nodeType":"YulFunctionCall","src":"1303:22:9"},{"name":"dataEnd","nativeSrc":"1327:7:9","nodeType":"YulIdentifier","src":"1327:7:9"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1271:31:9","nodeType":"YulIdentifier","src":"1271:31:9"},"nativeSrc":"1271:64:9","nodeType":"YulFunctionCall","src":"1271:64:9"},"variableNames":[{"name":"value1","nativeSrc":"1261:6:9","nodeType":"YulIdentifier","src":"1261:6:9"}]}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nativeSrc":"845:507:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"901:9:9","nodeType":"YulTypedName","src":"901:9:9","type":""},{"name":"dataEnd","nativeSrc":"912:7:9","nodeType":"YulTypedName","src":"912:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"924:6:9","nodeType":"YulTypedName","src":"924:6:9","type":""},{"name":"value1","nativeSrc":"932:6:9","nodeType":"YulTypedName","src":"932:6:9","type":""}],"src":"845:507:9"},{"body":{"nativeSrc":"1454:73:9","nodeType":"YulBlock","src":"1454:73:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1471:3:9","nodeType":"YulIdentifier","src":"1471:3:9"},{"name":"length","nativeSrc":"1476:6:9","nodeType":"YulIdentifier","src":"1476:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1464:6:9","nodeType":"YulIdentifier","src":"1464:6:9"},"nativeSrc":"1464:19:9","nodeType":"YulFunctionCall","src":"1464:19:9"},"nativeSrc":"1464:19:9","nodeType":"YulExpressionStatement","src":"1464:19:9"},{"nativeSrc":"1492:29:9","nodeType":"YulAssignment","src":"1492:29:9","value":{"arguments":[{"name":"pos","nativeSrc":"1511:3:9","nodeType":"YulIdentifier","src":"1511:3:9"},{"kind":"number","nativeSrc":"1516:4:9","nodeType":"YulLiteral","src":"1516:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1507:3:9","nodeType":"YulIdentifier","src":"1507:3:9"},"nativeSrc":"1507:14:9","nodeType":"YulFunctionCall","src":"1507:14:9"},"variableNames":[{"name":"updated_pos","nativeSrc":"1492:11:9","nodeType":"YulIdentifier","src":"1492:11:9"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1358:169:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1426:3:9","nodeType":"YulTypedName","src":"1426:3:9","type":""},{"name":"length","nativeSrc":"1431:6:9","nodeType":"YulTypedName","src":"1431:6:9","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1442:11:9","nodeType":"YulTypedName","src":"1442:11:9","type":""}],"src":"1358:169:9"},{"body":{"nativeSrc":"1639:68:9","nodeType":"YulBlock","src":"1639:68:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1661:6:9","nodeType":"YulIdentifier","src":"1661:6:9"},{"kind":"number","nativeSrc":"1669:1:9","nodeType":"YulLiteral","src":"1669:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1657:3:9","nodeType":"YulIdentifier","src":"1657:3:9"},"nativeSrc":"1657:14:9","nodeType":"YulFunctionCall","src":"1657:14:9"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nativeSrc":"1673:26:9","nodeType":"YulLiteral","src":"1673:26:9","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nativeSrc":"1650:6:9","nodeType":"YulIdentifier","src":"1650:6:9"},"nativeSrc":"1650:50:9","nodeType":"YulFunctionCall","src":"1650:50:9"},"nativeSrc":"1650:50:9","nodeType":"YulExpressionStatement","src":"1650:50:9"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1533:174:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1631:6:9","nodeType":"YulTypedName","src":"1631:6:9","type":""}],"src":"1533:174:9"},{"body":{"nativeSrc":"1859:220:9","nodeType":"YulBlock","src":"1859:220:9","statements":[{"nativeSrc":"1869:74:9","nodeType":"YulAssignment","src":"1869:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"1935:3:9","nodeType":"YulIdentifier","src":"1935:3:9"},{"kind":"number","nativeSrc":"1940:2:9","nodeType":"YulLiteral","src":"1940:2:9","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1876:58:9","nodeType":"YulIdentifier","src":"1876:58:9"},"nativeSrc":"1876:67:9","nodeType":"YulFunctionCall","src":"1876:67:9"},"variableNames":[{"name":"pos","nativeSrc":"1869:3:9","nodeType":"YulIdentifier","src":"1869:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2041:3:9","nodeType":"YulIdentifier","src":"2041:3:9"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1952:88:9","nodeType":"YulIdentifier","src":"1952:88:9"},"nativeSrc":"1952:93:9","nodeType":"YulFunctionCall","src":"1952:93:9"},"nativeSrc":"1952:93:9","nodeType":"YulExpressionStatement","src":"1952:93:9"},{"nativeSrc":"2054:19:9","nodeType":"YulAssignment","src":"2054:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"2065:3:9","nodeType":"YulIdentifier","src":"2065:3:9"},{"kind":"number","nativeSrc":"2070:2:9","nodeType":"YulLiteral","src":"2070:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2061:3:9","nodeType":"YulIdentifier","src":"2061:3:9"},"nativeSrc":"2061:12:9","nodeType":"YulFunctionCall","src":"2061:12:9"},"variableNames":[{"name":"end","nativeSrc":"2054:3:9","nodeType":"YulIdentifier","src":"2054:3:9"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"1713:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1847:3:9","nodeType":"YulTypedName","src":"1847:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"1855:3:9","nodeType":"YulTypedName","src":"1855:3:9","type":""}],"src":"1713:366:9"},{"body":{"nativeSrc":"2256:248:9","nodeType":"YulBlock","src":"2256:248:9","statements":[{"nativeSrc":"2266:26:9","nodeType":"YulAssignment","src":"2266:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"2278:9:9","nodeType":"YulIdentifier","src":"2278:9:9"},{"kind":"number","nativeSrc":"2289:2:9","nodeType":"YulLiteral","src":"2289:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2274:3:9","nodeType":"YulIdentifier","src":"2274:3:9"},"nativeSrc":"2274:18:9","nodeType":"YulFunctionCall","src":"2274:18:9"},"variableNames":[{"name":"tail","nativeSrc":"2266:4:9","nodeType":"YulIdentifier","src":"2266:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2313:9:9","nodeType":"YulIdentifier","src":"2313:9:9"},{"kind":"number","nativeSrc":"2324:1:9","nodeType":"YulLiteral","src":"2324:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2309:3:9","nodeType":"YulIdentifier","src":"2309:3:9"},"nativeSrc":"2309:17:9","nodeType":"YulFunctionCall","src":"2309:17:9"},{"arguments":[{"name":"tail","nativeSrc":"2332:4:9","nodeType":"YulIdentifier","src":"2332:4:9"},{"name":"headStart","nativeSrc":"2338:9:9","nodeType":"YulIdentifier","src":"2338:9:9"}],"functionName":{"name":"sub","nativeSrc":"2328:3:9","nodeType":"YulIdentifier","src":"2328:3:9"},"nativeSrc":"2328:20:9","nodeType":"YulFunctionCall","src":"2328:20:9"}],"functionName":{"name":"mstore","nativeSrc":"2302:6:9","nodeType":"YulIdentifier","src":"2302:6:9"},"nativeSrc":"2302:47:9","nodeType":"YulFunctionCall","src":"2302:47:9"},"nativeSrc":"2302:47:9","nodeType":"YulExpressionStatement","src":"2302:47:9"},{"nativeSrc":"2358:139:9","nodeType":"YulAssignment","src":"2358:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"2492:4:9","nodeType":"YulIdentifier","src":"2492:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"2366:124:9","nodeType":"YulIdentifier","src":"2366:124:9"},"nativeSrc":"2366:131:9","nodeType":"YulFunctionCall","src":"2366:131:9"},"variableNames":[{"name":"tail","nativeSrc":"2358:4:9","nodeType":"YulIdentifier","src":"2358:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2085:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2236:9:9","nodeType":"YulTypedName","src":"2236:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2251:4:9","nodeType":"YulTypedName","src":"2251:4:9","type":""}],"src":"2085:419:9"},{"body":{"nativeSrc":"2616:67:9","nodeType":"YulBlock","src":"2616:67:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2638:6:9","nodeType":"YulIdentifier","src":"2638:6:9"},{"kind":"number","nativeSrc":"2646:1:9","nodeType":"YulLiteral","src":"2646:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2634:3:9","nodeType":"YulIdentifier","src":"2634:3:9"},"nativeSrc":"2634:14:9","nodeType":"YulFunctionCall","src":"2634:14:9"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"2650:25:9","nodeType":"YulLiteral","src":"2650:25:9","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"2627:6:9","nodeType":"YulIdentifier","src":"2627:6:9"},"nativeSrc":"2627:49:9","nodeType":"YulFunctionCall","src":"2627:49:9"},"nativeSrc":"2627:49:9","nodeType":"YulExpressionStatement","src":"2627:49:9"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2510:173:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2608:6:9","nodeType":"YulTypedName","src":"2608:6:9","type":""}],"src":"2510:173:9"},{"body":{"nativeSrc":"2835:220:9","nodeType":"YulBlock","src":"2835:220:9","statements":[{"nativeSrc":"2845:74:9","nodeType":"YulAssignment","src":"2845:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"2911:3:9","nodeType":"YulIdentifier","src":"2911:3:9"},{"kind":"number","nativeSrc":"2916:2:9","nodeType":"YulLiteral","src":"2916:2:9","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2852:58:9","nodeType":"YulIdentifier","src":"2852:58:9"},"nativeSrc":"2852:67:9","nodeType":"YulFunctionCall","src":"2852:67:9"},"variableNames":[{"name":"pos","nativeSrc":"2845:3:9","nodeType":"YulIdentifier","src":"2845:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3017:3:9","nodeType":"YulIdentifier","src":"3017:3:9"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2928:88:9","nodeType":"YulIdentifier","src":"2928:88:9"},"nativeSrc":"2928:93:9","nodeType":"YulFunctionCall","src":"2928:93:9"},"nativeSrc":"2928:93:9","nodeType":"YulExpressionStatement","src":"2928:93:9"},{"nativeSrc":"3030:19:9","nodeType":"YulAssignment","src":"3030:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"3041:3:9","nodeType":"YulIdentifier","src":"3041:3:9"},{"kind":"number","nativeSrc":"3046:2:9","nodeType":"YulLiteral","src":"3046:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3037:3:9","nodeType":"YulIdentifier","src":"3037:3:9"},"nativeSrc":"3037:12:9","nodeType":"YulFunctionCall","src":"3037:12:9"},"variableNames":[{"name":"end","nativeSrc":"3030:3:9","nodeType":"YulIdentifier","src":"3030:3:9"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"2689:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2823:3:9","nodeType":"YulTypedName","src":"2823:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2831:3:9","nodeType":"YulTypedName","src":"2831:3:9","type":""}],"src":"2689:366:9"},{"body":{"nativeSrc":"3232:248:9","nodeType":"YulBlock","src":"3232:248:9","statements":[{"nativeSrc":"3242:26:9","nodeType":"YulAssignment","src":"3242:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"3254:9:9","nodeType":"YulIdentifier","src":"3254:9:9"},{"kind":"number","nativeSrc":"3265:2:9","nodeType":"YulLiteral","src":"3265:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3250:3:9","nodeType":"YulIdentifier","src":"3250:3:9"},"nativeSrc":"3250:18:9","nodeType":"YulFunctionCall","src":"3250:18:9"},"variableNames":[{"name":"tail","nativeSrc":"3242:4:9","nodeType":"YulIdentifier","src":"3242:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3289:9:9","nodeType":"YulIdentifier","src":"3289:9:9"},{"kind":"number","nativeSrc":"3300:1:9","nodeType":"YulLiteral","src":"3300:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3285:3:9","nodeType":"YulIdentifier","src":"3285:3:9"},"nativeSrc":"3285:17:9","nodeType":"YulFunctionCall","src":"3285:17:9"},{"arguments":[{"name":"tail","nativeSrc":"3308:4:9","nodeType":"YulIdentifier","src":"3308:4:9"},{"name":"headStart","nativeSrc":"3314:9:9","nodeType":"YulIdentifier","src":"3314:9:9"}],"functionName":{"name":"sub","nativeSrc":"3304:3:9","nodeType":"YulIdentifier","src":"3304:3:9"},"nativeSrc":"3304:20:9","nodeType":"YulFunctionCall","src":"3304:20:9"}],"functionName":{"name":"mstore","nativeSrc":"3278:6:9","nodeType":"YulIdentifier","src":"3278:6:9"},"nativeSrc":"3278:47:9","nodeType":"YulFunctionCall","src":"3278:47:9"},"nativeSrc":"3278:47:9","nodeType":"YulExpressionStatement","src":"3278:47:9"},{"nativeSrc":"3334:139:9","nodeType":"YulAssignment","src":"3334:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"3468:4:9","nodeType":"YulIdentifier","src":"3468:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3342:124:9","nodeType":"YulIdentifier","src":"3342:124:9"},"nativeSrc":"3342:131:9","nodeType":"YulFunctionCall","src":"3342:131:9"},"variableNames":[{"name":"tail","nativeSrc":"3334:4:9","nodeType":"YulIdentifier","src":"3334:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3061:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3212:9:9","nodeType":"YulTypedName","src":"3212:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3227:4:9","nodeType":"YulTypedName","src":"3227:4:9","type":""}],"src":"3061:419:9"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610a50380380610a50833981810160405281019061003291906102bb565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610358565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610125576101248161012c60201b60201c565b5b50506103e4565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610191906103c4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102888261025d565b9050919050565b6102988161027d565b81146102a357600080fd5b50565b6000815190506102b58161028f565b92915050565b600080604083850312156102d2576102d1610258565b5b60006102e0858286016102a6565b92505060206102f1858286016102a6565b9150509250929050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006103426018836102fb565b915061034d8261030c565b602082019050919050565b6000602082019050818103600083015261037181610335565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006103ae6017836102fb565b91506103b982610378565b602082019050919050565b600060208201905081810360008301526103dd816103a1565b9050919050565b61065d806103f36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea26469706673582212208f9417a18201b93f82f4e1e0a4fb121a0a2801b5c4bed17d5673a5cb749683a864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA50 CODESIZE SUB DUP1 PUSH2 0xA50 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x98 SWAP1 PUSH2 0x358 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x125 JUMPI PUSH2 0x124 DUP2 PUSH2 0x12C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP PUSH2 0x3E4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288 DUP3 PUSH2 0x25D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x298 DUP2 PUSH2 0x27D JUMP JUMPDEST DUP2 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B5 DUP2 PUSH2 0x28F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH2 0x2D1 PUSH2 0x258 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E0 DUP6 DUP3 DUP7 ADD PUSH2 0x2A6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F1 DUP6 DUP3 DUP7 ADD PUSH2 0x2A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x342 PUSH1 0x18 DUP4 PUSH2 0x2FB JUMP JUMPDEST SWAP2 POP PUSH2 0x34D DUP3 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x371 DUP2 PUSH2 0x335 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AE PUSH1 0x17 DUP4 PUSH2 0x2FB JUMP JUMPDEST SWAP2 POP PUSH2 0x3B9 DUP3 PUSH2 0x378 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DD DUP2 PUSH2 0x3A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x65D DUP1 PUSH2 0x3F3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 SWAP5 OR LOG1 DUP3 ADD 0xB9 EXTCODEHASH DUP3 DELEGATECALL 0xE1 0xE0 LOG4 0xFB SLT BYTE EXP 0x28 ADD 0xB5 0xC4 0xBE 0xD1 PUSH30 0x5673A5CB749683A864736F6C634300081800330000000000000000000000 ","sourceMap":"216:1893:4:-:0;;;481:282;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;618:1;598:22;;:8;:22;;;590:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:8;656:7;;:18;;;;;;;;;;;;;;;;;;708:1;684:26;;:12;:26;;;680:79;;720:32;739:12;720:18;;;:32;;:::i;:::-;680:79;481:282;;216:1893;;1536:239;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;88:117:9:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;1358:169::-;1442:11;1476:6;1471:3;1464:19;1516:4;1511:3;1507:14;1492:29;;1358:169;;;;:::o;1533:174::-;1673:26;1669:1;1661:6;1657:14;1650:50;1533:174;:::o;1713:366::-;1855:3;1876:67;1940:2;1935:3;1876:67;:::i;:::-;1869:74;;1952:93;2041:3;1952:93;:::i;:::-;2070:2;2065:3;2061:12;2054:19;;1713:366;;;:::o;2085:419::-;2251:4;2289:2;2278:9;2274:18;2266:26;;2338:9;2332:4;2328:20;2324:1;2313:9;2309:17;2302:47;2366:131;2492:4;2366:131;:::i;:::-;2358:139;;2085:419;;;:::o;2510:173::-;2650:25;2646:1;2638:6;2634:14;2627:49;2510:173;:::o;2689:366::-;2831:3;2852:67;2916:2;2911:3;2852:67;:::i;:::-;2845:74;;2928:93;3017:3;2928:93;:::i;:::-;3046:2;3041:3;3037:12;3030:19;;2689:366;;;:::o;3061:419::-;3227:4;3265:2;3254:9;3250:18;3242:26;;3314:9;3308:4;3304:20;3300:1;3289:9;3285:17;3278:47;3342:131;3468:4;3342:131;:::i;:::-;3334:139;;3061:419;;;:::o;216:1893:4:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_229":{"entryPoint":748,"id":229,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_242":{"entryPoint":604,"id":242,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_195":{"entryPoint":138,"id":195,"parameterSlots":0,"returnSlots":0},"@owner_205":{"entryPoint":543,"id":205,"parameterSlots":0,"returnSlots":1},"@transferOwnership_159":{"entryPoint":584,"id":159,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":1168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1098,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1543,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1234,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1048,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1140,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4626:9","nodeType":"YulBlock","src":"0:4626:9","statements":[{"body":{"nativeSrc":"52:81:9","nodeType":"YulBlock","src":"52:81:9","statements":[{"nativeSrc":"62:65:9","nodeType":"YulAssignment","src":"62:65:9","value":{"arguments":[{"name":"value","nativeSrc":"77:5:9","nodeType":"YulIdentifier","src":"77:5:9"},{"kind":"number","nativeSrc":"84:42:9","nodeType":"YulLiteral","src":"84:42:9","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:9","nodeType":"YulIdentifier","src":"73:3:9"},"nativeSrc":"73:54:9","nodeType":"YulFunctionCall","src":"73:54:9"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:9","nodeType":"YulIdentifier","src":"62:7:9"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:9","nodeType":"YulTypedName","src":"34:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:9","nodeType":"YulTypedName","src":"44:7:9","type":""}],"src":"7:126:9"},{"body":{"nativeSrc":"184:51:9","nodeType":"YulBlock","src":"184:51:9","statements":[{"nativeSrc":"194:35:9","nodeType":"YulAssignment","src":"194:35:9","value":{"arguments":[{"name":"value","nativeSrc":"223:5:9","nodeType":"YulIdentifier","src":"223:5:9"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:9","nodeType":"YulIdentifier","src":"205:17:9"},"nativeSrc":"205:24:9","nodeType":"YulFunctionCall","src":"205:24:9"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:9","nodeType":"YulIdentifier","src":"194:7:9"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:9","nodeType":"YulTypedName","src":"166:5:9","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:9","nodeType":"YulTypedName","src":"176:7:9","type":""}],"src":"139:96:9"},{"body":{"nativeSrc":"306:53:9","nodeType":"YulBlock","src":"306:53:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:9","nodeType":"YulIdentifier","src":"323:3:9"},{"arguments":[{"name":"value","nativeSrc":"346:5:9","nodeType":"YulIdentifier","src":"346:5:9"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:9","nodeType":"YulIdentifier","src":"328:17:9"},"nativeSrc":"328:24:9","nodeType":"YulFunctionCall","src":"328:24:9"}],"functionName":{"name":"mstore","nativeSrc":"316:6:9","nodeType":"YulIdentifier","src":"316:6:9"},"nativeSrc":"316:37:9","nodeType":"YulFunctionCall","src":"316:37:9"},"nativeSrc":"316:37:9","nodeType":"YulExpressionStatement","src":"316:37:9"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:9","nodeType":"YulTypedName","src":"294:5:9","type":""},{"name":"pos","nativeSrc":"301:3:9","nodeType":"YulTypedName","src":"301:3:9","type":""}],"src":"241:118:9"},{"body":{"nativeSrc":"463:124:9","nodeType":"YulBlock","src":"463:124:9","statements":[{"nativeSrc":"473:26:9","nodeType":"YulAssignment","src":"473:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:9","nodeType":"YulIdentifier","src":"485:9:9"},{"kind":"number","nativeSrc":"496:2:9","nodeType":"YulLiteral","src":"496:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:9","nodeType":"YulIdentifier","src":"481:3:9"},"nativeSrc":"481:18:9","nodeType":"YulFunctionCall","src":"481:18:9"},"variableNames":[{"name":"tail","nativeSrc":"473:4:9","nodeType":"YulIdentifier","src":"473:4:9"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:9","nodeType":"YulIdentifier","src":"553:6:9"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:9","nodeType":"YulIdentifier","src":"566:9:9"},{"kind":"number","nativeSrc":"577:1:9","nodeType":"YulLiteral","src":"577:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:9","nodeType":"YulIdentifier","src":"562:3:9"},"nativeSrc":"562:17:9","nodeType":"YulFunctionCall","src":"562:17:9"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:9","nodeType":"YulIdentifier","src":"509:43:9"},"nativeSrc":"509:71:9","nodeType":"YulFunctionCall","src":"509:71:9"},"nativeSrc":"509:71:9","nodeType":"YulExpressionStatement","src":"509:71:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:9","nodeType":"YulTypedName","src":"435:9:9","type":""},{"name":"value0","nativeSrc":"447:6:9","nodeType":"YulTypedName","src":"447:6:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:9","nodeType":"YulTypedName","src":"458:4:9","type":""}],"src":"365:222:9"},{"body":{"nativeSrc":"633:35:9","nodeType":"YulBlock","src":"633:35:9","statements":[{"nativeSrc":"643:19:9","nodeType":"YulAssignment","src":"643:19:9","value":{"arguments":[{"kind":"number","nativeSrc":"659:2:9","nodeType":"YulLiteral","src":"659:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"653:5:9","nodeType":"YulIdentifier","src":"653:5:9"},"nativeSrc":"653:9:9","nodeType":"YulFunctionCall","src":"653:9:9"},"variableNames":[{"name":"memPtr","nativeSrc":"643:6:9","nodeType":"YulIdentifier","src":"643:6:9"}]}]},"name":"allocate_unbounded","nativeSrc":"593:75:9","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"626:6:9","nodeType":"YulTypedName","src":"626:6:9","type":""}],"src":"593:75:9"},{"body":{"nativeSrc":"763:28:9","nodeType":"YulBlock","src":"763:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"780:1:9","nodeType":"YulLiteral","src":"780:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"783:1:9","nodeType":"YulLiteral","src":"783:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"773:6:9","nodeType":"YulIdentifier","src":"773:6:9"},"nativeSrc":"773:12:9","nodeType":"YulFunctionCall","src":"773:12:9"},"nativeSrc":"773:12:9","nodeType":"YulExpressionStatement","src":"773:12:9"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"674:117:9","nodeType":"YulFunctionDefinition","src":"674:117:9"},{"body":{"nativeSrc":"886:28:9","nodeType":"YulBlock","src":"886:28:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:9","nodeType":"YulLiteral","src":"903:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"906:1:9","nodeType":"YulLiteral","src":"906:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"896:6:9","nodeType":"YulIdentifier","src":"896:6:9"},"nativeSrc":"896:12:9","nodeType":"YulFunctionCall","src":"896:12:9"},"nativeSrc":"896:12:9","nodeType":"YulExpressionStatement","src":"896:12:9"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"797:117:9","nodeType":"YulFunctionDefinition","src":"797:117:9"},{"body":{"nativeSrc":"963:79:9","nodeType":"YulBlock","src":"963:79:9","statements":[{"body":{"nativeSrc":"1020:16:9","nodeType":"YulBlock","src":"1020:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1029:1:9","nodeType":"YulLiteral","src":"1029:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1032:1:9","nodeType":"YulLiteral","src":"1032:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1022:6:9","nodeType":"YulIdentifier","src":"1022:6:9"},"nativeSrc":"1022:12:9","nodeType":"YulFunctionCall","src":"1022:12:9"},"nativeSrc":"1022:12:9","nodeType":"YulExpressionStatement","src":"1022:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"986:5:9","nodeType":"YulIdentifier","src":"986:5:9"},{"arguments":[{"name":"value","nativeSrc":"1011:5:9","nodeType":"YulIdentifier","src":"1011:5:9"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"993:17:9","nodeType":"YulIdentifier","src":"993:17:9"},"nativeSrc":"993:24:9","nodeType":"YulFunctionCall","src":"993:24:9"}],"functionName":{"name":"eq","nativeSrc":"983:2:9","nodeType":"YulIdentifier","src":"983:2:9"},"nativeSrc":"983:35:9","nodeType":"YulFunctionCall","src":"983:35:9"}],"functionName":{"name":"iszero","nativeSrc":"976:6:9","nodeType":"YulIdentifier","src":"976:6:9"},"nativeSrc":"976:43:9","nodeType":"YulFunctionCall","src":"976:43:9"},"nativeSrc":"973:63:9","nodeType":"YulIf","src":"973:63:9"}]},"name":"validator_revert_t_address","nativeSrc":"920:122:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"956:5:9","nodeType":"YulTypedName","src":"956:5:9","type":""}],"src":"920:122:9"},{"body":{"nativeSrc":"1100:87:9","nodeType":"YulBlock","src":"1100:87:9","statements":[{"nativeSrc":"1110:29:9","nodeType":"YulAssignment","src":"1110:29:9","value":{"arguments":[{"name":"offset","nativeSrc":"1132:6:9","nodeType":"YulIdentifier","src":"1132:6:9"}],"functionName":{"name":"calldataload","nativeSrc":"1119:12:9","nodeType":"YulIdentifier","src":"1119:12:9"},"nativeSrc":"1119:20:9","nodeType":"YulFunctionCall","src":"1119:20:9"},"variableNames":[{"name":"value","nativeSrc":"1110:5:9","nodeType":"YulIdentifier","src":"1110:5:9"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1175:5:9","nodeType":"YulIdentifier","src":"1175:5:9"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"1148:26:9","nodeType":"YulIdentifier","src":"1148:26:9"},"nativeSrc":"1148:33:9","nodeType":"YulFunctionCall","src":"1148:33:9"},"nativeSrc":"1148:33:9","nodeType":"YulExpressionStatement","src":"1148:33:9"}]},"name":"abi_decode_t_address","nativeSrc":"1048:139:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1078:6:9","nodeType":"YulTypedName","src":"1078:6:9","type":""},{"name":"end","nativeSrc":"1086:3:9","nodeType":"YulTypedName","src":"1086:3:9","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1094:5:9","nodeType":"YulTypedName","src":"1094:5:9","type":""}],"src":"1048:139:9"},{"body":{"nativeSrc":"1259:263:9","nodeType":"YulBlock","src":"1259:263:9","statements":[{"body":{"nativeSrc":"1305:83:9","nodeType":"YulBlock","src":"1305:83:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1307:77:9","nodeType":"YulIdentifier","src":"1307:77:9"},"nativeSrc":"1307:79:9","nodeType":"YulFunctionCall","src":"1307:79:9"},"nativeSrc":"1307:79:9","nodeType":"YulExpressionStatement","src":"1307:79:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1280:7:9","nodeType":"YulIdentifier","src":"1280:7:9"},{"name":"headStart","nativeSrc":"1289:9:9","nodeType":"YulIdentifier","src":"1289:9:9"}],"functionName":{"name":"sub","nativeSrc":"1276:3:9","nodeType":"YulIdentifier","src":"1276:3:9"},"nativeSrc":"1276:23:9","nodeType":"YulFunctionCall","src":"1276:23:9"},{"kind":"number","nativeSrc":"1301:2:9","nodeType":"YulLiteral","src":"1301:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1272:3:9","nodeType":"YulIdentifier","src":"1272:3:9"},"nativeSrc":"1272:32:9","nodeType":"YulFunctionCall","src":"1272:32:9"},"nativeSrc":"1269:119:9","nodeType":"YulIf","src":"1269:119:9"},{"nativeSrc":"1398:117:9","nodeType":"YulBlock","src":"1398:117:9","statements":[{"nativeSrc":"1413:15:9","nodeType":"YulVariableDeclaration","src":"1413:15:9","value":{"kind":"number","nativeSrc":"1427:1:9","nodeType":"YulLiteral","src":"1427:1:9","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1417:6:9","nodeType":"YulTypedName","src":"1417:6:9","type":""}]},{"nativeSrc":"1442:63:9","nodeType":"YulAssignment","src":"1442:63:9","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1477:9:9","nodeType":"YulIdentifier","src":"1477:9:9"},{"name":"offset","nativeSrc":"1488:6:9","nodeType":"YulIdentifier","src":"1488:6:9"}],"functionName":{"name":"add","nativeSrc":"1473:3:9","nodeType":"YulIdentifier","src":"1473:3:9"},"nativeSrc":"1473:22:9","nodeType":"YulFunctionCall","src":"1473:22:9"},{"name":"dataEnd","nativeSrc":"1497:7:9","nodeType":"YulIdentifier","src":"1497:7:9"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1452:20:9","nodeType":"YulIdentifier","src":"1452:20:9"},"nativeSrc":"1452:53:9","nodeType":"YulFunctionCall","src":"1452:53:9"},"variableNames":[{"name":"value0","nativeSrc":"1442:6:9","nodeType":"YulIdentifier","src":"1442:6:9"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1193:329:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1229:9:9","nodeType":"YulTypedName","src":"1229:9:9","type":""},{"name":"dataEnd","nativeSrc":"1240:7:9","nodeType":"YulTypedName","src":"1240:7:9","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1252:6:9","nodeType":"YulTypedName","src":"1252:6:9","type":""}],"src":"1193:329:9"},{"body":{"nativeSrc":"1624:73:9","nodeType":"YulBlock","src":"1624:73:9","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1641:3:9","nodeType":"YulIdentifier","src":"1641:3:9"},{"name":"length","nativeSrc":"1646:6:9","nodeType":"YulIdentifier","src":"1646:6:9"}],"functionName":{"name":"mstore","nativeSrc":"1634:6:9","nodeType":"YulIdentifier","src":"1634:6:9"},"nativeSrc":"1634:19:9","nodeType":"YulFunctionCall","src":"1634:19:9"},"nativeSrc":"1634:19:9","nodeType":"YulExpressionStatement","src":"1634:19:9"},{"nativeSrc":"1662:29:9","nodeType":"YulAssignment","src":"1662:29:9","value":{"arguments":[{"name":"pos","nativeSrc":"1681:3:9","nodeType":"YulIdentifier","src":"1681:3:9"},{"kind":"number","nativeSrc":"1686:4:9","nodeType":"YulLiteral","src":"1686:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1677:3:9","nodeType":"YulIdentifier","src":"1677:3:9"},"nativeSrc":"1677:14:9","nodeType":"YulFunctionCall","src":"1677:14:9"},"variableNames":[{"name":"updated_pos","nativeSrc":"1662:11:9","nodeType":"YulIdentifier","src":"1662:11:9"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1528:169:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1596:3:9","nodeType":"YulTypedName","src":"1596:3:9","type":""},{"name":"length","nativeSrc":"1601:6:9","nodeType":"YulTypedName","src":"1601:6:9","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1612:11:9","nodeType":"YulTypedName","src":"1612:11:9","type":""}],"src":"1528:169:9"},{"body":{"nativeSrc":"1809:66:9","nodeType":"YulBlock","src":"1809:66:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1831:6:9","nodeType":"YulIdentifier","src":"1831:6:9"},{"kind":"number","nativeSrc":"1839:1:9","nodeType":"YulLiteral","src":"1839:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1827:3:9","nodeType":"YulIdentifier","src":"1827:3:9"},"nativeSrc":"1827:14:9","nodeType":"YulFunctionCall","src":"1827:14:9"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nativeSrc":"1843:24:9","nodeType":"YulLiteral","src":"1843:24:9","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nativeSrc":"1820:6:9","nodeType":"YulIdentifier","src":"1820:6:9"},"nativeSrc":"1820:48:9","nodeType":"YulFunctionCall","src":"1820:48:9"},"nativeSrc":"1820:48:9","nodeType":"YulExpressionStatement","src":"1820:48:9"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"1703:172:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1801:6:9","nodeType":"YulTypedName","src":"1801:6:9","type":""}],"src":"1703:172:9"},{"body":{"nativeSrc":"2027:220:9","nodeType":"YulBlock","src":"2027:220:9","statements":[{"nativeSrc":"2037:74:9","nodeType":"YulAssignment","src":"2037:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"2103:3:9","nodeType":"YulIdentifier","src":"2103:3:9"},{"kind":"number","nativeSrc":"2108:2:9","nodeType":"YulLiteral","src":"2108:2:9","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2044:58:9","nodeType":"YulIdentifier","src":"2044:58:9"},"nativeSrc":"2044:67:9","nodeType":"YulFunctionCall","src":"2044:67:9"},"variableNames":[{"name":"pos","nativeSrc":"2037:3:9","nodeType":"YulIdentifier","src":"2037:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2209:3:9","nodeType":"YulIdentifier","src":"2209:3:9"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"2120:88:9","nodeType":"YulIdentifier","src":"2120:88:9"},"nativeSrc":"2120:93:9","nodeType":"YulFunctionCall","src":"2120:93:9"},"nativeSrc":"2120:93:9","nodeType":"YulExpressionStatement","src":"2120:93:9"},{"nativeSrc":"2222:19:9","nodeType":"YulAssignment","src":"2222:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"2233:3:9","nodeType":"YulIdentifier","src":"2233:3:9"},{"kind":"number","nativeSrc":"2238:2:9","nodeType":"YulLiteral","src":"2238:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2229:3:9","nodeType":"YulIdentifier","src":"2229:3:9"},"nativeSrc":"2229:12:9","nodeType":"YulFunctionCall","src":"2229:12:9"},"variableNames":[{"name":"end","nativeSrc":"2222:3:9","nodeType":"YulIdentifier","src":"2222:3:9"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"1881:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2015:3:9","nodeType":"YulTypedName","src":"2015:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2023:3:9","nodeType":"YulTypedName","src":"2023:3:9","type":""}],"src":"1881:366:9"},{"body":{"nativeSrc":"2424:248:9","nodeType":"YulBlock","src":"2424:248:9","statements":[{"nativeSrc":"2434:26:9","nodeType":"YulAssignment","src":"2434:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"2446:9:9","nodeType":"YulIdentifier","src":"2446:9:9"},{"kind":"number","nativeSrc":"2457:2:9","nodeType":"YulLiteral","src":"2457:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2442:3:9","nodeType":"YulIdentifier","src":"2442:3:9"},"nativeSrc":"2442:18:9","nodeType":"YulFunctionCall","src":"2442:18:9"},"variableNames":[{"name":"tail","nativeSrc":"2434:4:9","nodeType":"YulIdentifier","src":"2434:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2481:9:9","nodeType":"YulIdentifier","src":"2481:9:9"},{"kind":"number","nativeSrc":"2492:1:9","nodeType":"YulLiteral","src":"2492:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2477:3:9","nodeType":"YulIdentifier","src":"2477:3:9"},"nativeSrc":"2477:17:9","nodeType":"YulFunctionCall","src":"2477:17:9"},{"arguments":[{"name":"tail","nativeSrc":"2500:4:9","nodeType":"YulIdentifier","src":"2500:4:9"},{"name":"headStart","nativeSrc":"2506:9:9","nodeType":"YulIdentifier","src":"2506:9:9"}],"functionName":{"name":"sub","nativeSrc":"2496:3:9","nodeType":"YulIdentifier","src":"2496:3:9"},"nativeSrc":"2496:20:9","nodeType":"YulFunctionCall","src":"2496:20:9"}],"functionName":{"name":"mstore","nativeSrc":"2470:6:9","nodeType":"YulIdentifier","src":"2470:6:9"},"nativeSrc":"2470:47:9","nodeType":"YulFunctionCall","src":"2470:47:9"},"nativeSrc":"2470:47:9","nodeType":"YulExpressionStatement","src":"2470:47:9"},{"nativeSrc":"2526:139:9","nodeType":"YulAssignment","src":"2526:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"2660:4:9","nodeType":"YulIdentifier","src":"2660:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"2534:124:9","nodeType":"YulIdentifier","src":"2534:124:9"},"nativeSrc":"2534:131:9","nodeType":"YulFunctionCall","src":"2534:131:9"},"variableNames":[{"name":"tail","nativeSrc":"2526:4:9","nodeType":"YulIdentifier","src":"2526:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2253:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2404:9:9","nodeType":"YulTypedName","src":"2404:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2419:4:9","nodeType":"YulTypedName","src":"2419:4:9","type":""}],"src":"2253:419:9"},{"body":{"nativeSrc":"2784:66:9","nodeType":"YulBlock","src":"2784:66:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2806:6:9","nodeType":"YulIdentifier","src":"2806:6:9"},{"kind":"number","nativeSrc":"2814:1:9","nodeType":"YulLiteral","src":"2814:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2802:3:9","nodeType":"YulIdentifier","src":"2802:3:9"},"nativeSrc":"2802:14:9","nodeType":"YulFunctionCall","src":"2802:14:9"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nativeSrc":"2818:24:9","nodeType":"YulLiteral","src":"2818:24:9","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nativeSrc":"2795:6:9","nodeType":"YulIdentifier","src":"2795:6:9"},"nativeSrc":"2795:48:9","nodeType":"YulFunctionCall","src":"2795:48:9"},"nativeSrc":"2795:48:9","nodeType":"YulExpressionStatement","src":"2795:48:9"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"2678:172:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2776:6:9","nodeType":"YulTypedName","src":"2776:6:9","type":""}],"src":"2678:172:9"},{"body":{"nativeSrc":"3002:220:9","nodeType":"YulBlock","src":"3002:220:9","statements":[{"nativeSrc":"3012:74:9","nodeType":"YulAssignment","src":"3012:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"3078:3:9","nodeType":"YulIdentifier","src":"3078:3:9"},{"kind":"number","nativeSrc":"3083:2:9","nodeType":"YulLiteral","src":"3083:2:9","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3019:58:9","nodeType":"YulIdentifier","src":"3019:58:9"},"nativeSrc":"3019:67:9","nodeType":"YulFunctionCall","src":"3019:67:9"},"variableNames":[{"name":"pos","nativeSrc":"3012:3:9","nodeType":"YulIdentifier","src":"3012:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3184:3:9","nodeType":"YulIdentifier","src":"3184:3:9"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"3095:88:9","nodeType":"YulIdentifier","src":"3095:88:9"},"nativeSrc":"3095:93:9","nodeType":"YulFunctionCall","src":"3095:93:9"},"nativeSrc":"3095:93:9","nodeType":"YulExpressionStatement","src":"3095:93:9"},{"nativeSrc":"3197:19:9","nodeType":"YulAssignment","src":"3197:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"3208:3:9","nodeType":"YulIdentifier","src":"3208:3:9"},{"kind":"number","nativeSrc":"3213:2:9","nodeType":"YulLiteral","src":"3213:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3204:3:9","nodeType":"YulIdentifier","src":"3204:3:9"},"nativeSrc":"3204:12:9","nodeType":"YulFunctionCall","src":"3204:12:9"},"variableNames":[{"name":"end","nativeSrc":"3197:3:9","nodeType":"YulIdentifier","src":"3197:3:9"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"2856:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2990:3:9","nodeType":"YulTypedName","src":"2990:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2998:3:9","nodeType":"YulTypedName","src":"2998:3:9","type":""}],"src":"2856:366:9"},{"body":{"nativeSrc":"3399:248:9","nodeType":"YulBlock","src":"3399:248:9","statements":[{"nativeSrc":"3409:26:9","nodeType":"YulAssignment","src":"3409:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"3421:9:9","nodeType":"YulIdentifier","src":"3421:9:9"},{"kind":"number","nativeSrc":"3432:2:9","nodeType":"YulLiteral","src":"3432:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3417:3:9","nodeType":"YulIdentifier","src":"3417:3:9"},"nativeSrc":"3417:18:9","nodeType":"YulFunctionCall","src":"3417:18:9"},"variableNames":[{"name":"tail","nativeSrc":"3409:4:9","nodeType":"YulIdentifier","src":"3409:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3456:9:9","nodeType":"YulIdentifier","src":"3456:9:9"},{"kind":"number","nativeSrc":"3467:1:9","nodeType":"YulLiteral","src":"3467:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3452:3:9","nodeType":"YulIdentifier","src":"3452:3:9"},"nativeSrc":"3452:17:9","nodeType":"YulFunctionCall","src":"3452:17:9"},{"arguments":[{"name":"tail","nativeSrc":"3475:4:9","nodeType":"YulIdentifier","src":"3475:4:9"},{"name":"headStart","nativeSrc":"3481:9:9","nodeType":"YulIdentifier","src":"3481:9:9"}],"functionName":{"name":"sub","nativeSrc":"3471:3:9","nodeType":"YulIdentifier","src":"3471:3:9"},"nativeSrc":"3471:20:9","nodeType":"YulFunctionCall","src":"3471:20:9"}],"functionName":{"name":"mstore","nativeSrc":"3445:6:9","nodeType":"YulIdentifier","src":"3445:6:9"},"nativeSrc":"3445:47:9","nodeType":"YulFunctionCall","src":"3445:47:9"},"nativeSrc":"3445:47:9","nodeType":"YulExpressionStatement","src":"3445:47:9"},{"nativeSrc":"3501:139:9","nodeType":"YulAssignment","src":"3501:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"3635:4:9","nodeType":"YulIdentifier","src":"3635:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"3509:124:9","nodeType":"YulIdentifier","src":"3509:124:9"},"nativeSrc":"3509:131:9","nodeType":"YulFunctionCall","src":"3509:131:9"},"variableNames":[{"name":"tail","nativeSrc":"3501:4:9","nodeType":"YulIdentifier","src":"3501:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3228:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3379:9:9","nodeType":"YulTypedName","src":"3379:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3394:4:9","nodeType":"YulTypedName","src":"3394:4:9","type":""}],"src":"3228:419:9"},{"body":{"nativeSrc":"3759:67:9","nodeType":"YulBlock","src":"3759:67:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"3781:6:9","nodeType":"YulIdentifier","src":"3781:6:9"},{"kind":"number","nativeSrc":"3789:1:9","nodeType":"YulLiteral","src":"3789:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3777:3:9","nodeType":"YulIdentifier","src":"3777:3:9"},"nativeSrc":"3777:14:9","nodeType":"YulFunctionCall","src":"3777:14:9"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"3793:25:9","nodeType":"YulLiteral","src":"3793:25:9","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"3770:6:9","nodeType":"YulIdentifier","src":"3770:6:9"},"nativeSrc":"3770:49:9","nodeType":"YulFunctionCall","src":"3770:49:9"},"nativeSrc":"3770:49:9","nodeType":"YulExpressionStatement","src":"3770:49:9"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"3653:173:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"3751:6:9","nodeType":"YulTypedName","src":"3751:6:9","type":""}],"src":"3653:173:9"},{"body":{"nativeSrc":"3978:220:9","nodeType":"YulBlock","src":"3978:220:9","statements":[{"nativeSrc":"3988:74:9","nodeType":"YulAssignment","src":"3988:74:9","value":{"arguments":[{"name":"pos","nativeSrc":"4054:3:9","nodeType":"YulIdentifier","src":"4054:3:9"},{"kind":"number","nativeSrc":"4059:2:9","nodeType":"YulLiteral","src":"4059:2:9","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3995:58:9","nodeType":"YulIdentifier","src":"3995:58:9"},"nativeSrc":"3995:67:9","nodeType":"YulFunctionCall","src":"3995:67:9"},"variableNames":[{"name":"pos","nativeSrc":"3988:3:9","nodeType":"YulIdentifier","src":"3988:3:9"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4160:3:9","nodeType":"YulIdentifier","src":"4160:3:9"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"4071:88:9","nodeType":"YulIdentifier","src":"4071:88:9"},"nativeSrc":"4071:93:9","nodeType":"YulFunctionCall","src":"4071:93:9"},"nativeSrc":"4071:93:9","nodeType":"YulExpressionStatement","src":"4071:93:9"},{"nativeSrc":"4173:19:9","nodeType":"YulAssignment","src":"4173:19:9","value":{"arguments":[{"name":"pos","nativeSrc":"4184:3:9","nodeType":"YulIdentifier","src":"4184:3:9"},{"kind":"number","nativeSrc":"4189:2:9","nodeType":"YulLiteral","src":"4189:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4180:3:9","nodeType":"YulIdentifier","src":"4180:3:9"},"nativeSrc":"4180:12:9","nodeType":"YulFunctionCall","src":"4180:12:9"},"variableNames":[{"name":"end","nativeSrc":"4173:3:9","nodeType":"YulIdentifier","src":"4173:3:9"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3832:366:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"3966:3:9","nodeType":"YulTypedName","src":"3966:3:9","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3974:3:9","nodeType":"YulTypedName","src":"3974:3:9","type":""}],"src":"3832:366:9"},{"body":{"nativeSrc":"4375:248:9","nodeType":"YulBlock","src":"4375:248:9","statements":[{"nativeSrc":"4385:26:9","nodeType":"YulAssignment","src":"4385:26:9","value":{"arguments":[{"name":"headStart","nativeSrc":"4397:9:9","nodeType":"YulIdentifier","src":"4397:9:9"},{"kind":"number","nativeSrc":"4408:2:9","nodeType":"YulLiteral","src":"4408:2:9","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4393:3:9","nodeType":"YulIdentifier","src":"4393:3:9"},"nativeSrc":"4393:18:9","nodeType":"YulFunctionCall","src":"4393:18:9"},"variableNames":[{"name":"tail","nativeSrc":"4385:4:9","nodeType":"YulIdentifier","src":"4385:4:9"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4432:9:9","nodeType":"YulIdentifier","src":"4432:9:9"},{"kind":"number","nativeSrc":"4443:1:9","nodeType":"YulLiteral","src":"4443:1:9","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4428:3:9","nodeType":"YulIdentifier","src":"4428:3:9"},"nativeSrc":"4428:17:9","nodeType":"YulFunctionCall","src":"4428:17:9"},{"arguments":[{"name":"tail","nativeSrc":"4451:4:9","nodeType":"YulIdentifier","src":"4451:4:9"},{"name":"headStart","nativeSrc":"4457:9:9","nodeType":"YulIdentifier","src":"4457:9:9"}],"functionName":{"name":"sub","nativeSrc":"4447:3:9","nodeType":"YulIdentifier","src":"4447:3:9"},"nativeSrc":"4447:20:9","nodeType":"YulFunctionCall","src":"4447:20:9"}],"functionName":{"name":"mstore","nativeSrc":"4421:6:9","nodeType":"YulIdentifier","src":"4421:6:9"},"nativeSrc":"4421:47:9","nodeType":"YulFunctionCall","src":"4421:47:9"},"nativeSrc":"4421:47:9","nodeType":"YulExpressionStatement","src":"4421:47:9"},{"nativeSrc":"4477:139:9","nodeType":"YulAssignment","src":"4477:139:9","value":{"arguments":[{"name":"tail","nativeSrc":"4611:4:9","nodeType":"YulIdentifier","src":"4611:4:9"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"4485:124:9","nodeType":"YulIdentifier","src":"4485:124:9"},"nativeSrc":"4485:131:9","nodeType":"YulFunctionCall","src":"4485:131:9"},"variableNames":[{"name":"tail","nativeSrc":"4477:4:9","nodeType":"YulIdentifier","src":"4477:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4204:419:9","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4355:9:9","nodeType":"YulTypedName","src":"4355:9:9","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4370:4:9","nodeType":"YulTypedName","src":"4370:4:9","type":""}],"src":"4204:419:9"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea26469706673582212208f9417a18201b93f82f4e1e0a4fb121a0a2801b5c4bed17d5673a5cb749683a864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 SWAP5 OR LOG1 DUP3 ADD 0xB9 EXTCODEHASH DUP3 DELEGATECALL 0xE1 0xE0 LOG4 0xFB SLT BYTE EXP 0x28 ADD 0xB5 0xC4 0xBE 0xD1 PUSH30 0x5673A5CB749683A864736F6C634300081800330000000000000000000000 ","sourceMap":"216:1893:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:316;;;:::i;:::-;;1382:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;847:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1026:316;1150:14;;;;;;;;;;;1136:28;;:10;:28;;;1128:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1198:16;1217:7;;;;;;;;;;;1198:26;;1240:10;1230:7;;:20;;;;;;;;;;;;;;;;;;1281:1;1256:14;;:27;;;;;;;;;;;;;;;;;;1326:10;1295:42;;1316:8;1295:42;;;;;;;;;;;;1071:271;1026:316::o;1382:81::-;1429:7;1451;;;;;;;;;;;1444:14;;1382:81;:::o;847:98::-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;;;;;;;;;1918:21;;:10;:21;;;1910:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1809:162::o;1536:239::-;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;7:126:9:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:169::-;1612:11;1646:6;1641:3;1634:19;1686:4;1681:3;1677:14;1662:29;;1528:169;;;;:::o;1703:172::-;1843:24;1839:1;1831:6;1827:14;1820:48;1703:172;:::o;1881:366::-;2023:3;2044:67;2108:2;2103:3;2044:67;:::i;:::-;2037:74;;2120:93;2209:3;2120:93;:::i;:::-;2238:2;2233:3;2229:12;2222:19;;1881:366;;;:::o;2253:419::-;2419:4;2457:2;2446:9;2442:18;2434:26;;2506:9;2500:4;2496:20;2492:1;2481:9;2477:17;2470:47;2534:131;2660:4;2534:131;:::i;:::-;2526:139;;2253:419;;;:::o;2678:172::-;2818:24;2814:1;2806:6;2802:14;2795:48;2678:172;:::o;2856:366::-;2998:3;3019:67;3083:2;3078:3;3019:67;:::i;:::-;3012:74;;3095:93;3184:3;3095:93;:::i;:::-;3213:2;3208:3;3204:12;3197:19;;2856:366;;;:::o;3228:419::-;3394:4;3432:2;3421:9;3417:18;3409:26;;3481:9;3475:4;3471:20;3467:1;3456:9;3452:17;3445:47;3509:131;3635:4;3509:131;:::i;:::-;3501:139;;3228:419;;;:::o;3653:173::-;3793:25;3789:1;3781:6;3777:14;3770:49;3653:173;:::o;3832:366::-;3974:3;3995:67;4059:2;4054:3;3995:67;:::i;:::-;3988:74;;4071:93;4160:3;4071:93;:::i;:::-;4189:2;4184:3;4180:12;4173:19;;3832:366;;;:::o;4204:419::-;4370:4;4408:2;4397:9;4393:18;4385:26;;4457:9;4451:4;4447:20;4443:1;4432:9;4428:17;4421:47;4485:131;4611:4;4485:131;:::i;:::-;4477:139;;4204:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54518","owner()":"2522","transferOwnership(address)":"30676"},"internal":{"_transferOwnership(address)":"infinite","_validateOwnership()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":\"ConfirmedOwnerWithProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":97,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":99,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"IOwnable":{"abi":[{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/Lottery.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"uint256","name":"currentBalance","type":"uint256"},{"internalType":"uint256","name":"numPlayers","type":"uint256"},{"internalType":"uint256","name":"raffleState","type":"uint256"}],"name":"Lottery_UpkeepNotNeeded","type":"error"},{"inputs":[],"name":"Lottery__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"Lottery__NotOpen","type":"error"},{"inputs":[],"name":"Lottery__TransferFailed","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"LotteryEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"participant","type":"address"}],"name":"RaffleEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestedRaffleWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"WinnerPicked","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRaffleState","outputs":[{"internalType":"enum Raffle.RaffleState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Youthisguy","details":"This implements Chainlink VRF v2 and Chainlink Keepers","kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"this is the function that the Chainlink keeper nodes call they look for the upkeepNeeded to return true the following should be true in order to return true 1. Our time interval should have passed 2. The lottery should have atleast one player, and some ETH 3. Our subscription should have atleast some LINK 4. The lottery should be in an \"open\" state"}},"title":"A sample Raffle Contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","getNumWords()":"53a2c19a","getPlayer(uint256)":"e55ae4e8","getRaffleState()":"115cbaf5","getRecentWinner()":"473f1ddc","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Lottery_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Youthisguy\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"this is the function that the Chainlink keeper nodes call they look for the upkeepNeeded to return true the following should be true in order to return true 1. Our time interval should have passed 2. The lottery should have atleast one player, and some ETH 3. Our subscription should have atleast some LINK 4. The lottery should be in an \\\"open\\\" state\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamparable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.7;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nerror Lottery__NotEnoughETHEntered();\\nerror Lottery__TransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery_UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\n/** @title A sample Raffle Contract\\n * @author Youthisguy\\n * @notice This contract is for creating an untamparable decentralized smart contract\\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\n\\nabstract contract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint16 private constant NUM_WORDS = 3;\\n\\n    /* Lottery Variables */\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /* Events */\\n    event LotteryEnter(address indexed player);\\n    event RaffleEnter(address indexed participant);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev this is the function that the Chainlink keeper nodes call\\n     * they look for the upkeepNeeded to return true\\n     * the following should be true in order to return true\\n     * 1. Our time interval should have passed\\n     * 2. The lottery should have atleast one player, and some ETH\\n     * 3. Our subscription should have atleast some LINK\\n     * 4. The lottery should be in an \\\"open\\\" state\\n     */\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata /* PerformData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(abi.encodePacked(\\\"\\\"));\\n        if (!upkeepNeeded) {\\n            revert Lottery_UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* View Pure functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) { \\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n}\\n\",\"keccak256\":\"0x5b4752c61702aabd9152042fd5f273f70306a90eb62a58191e22fa4f7a8a3abc\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}","storageLayout":{"storage":[{"astId":458,"contract":"contracts/Lottery.sol:Raffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":475,"contract":"contracts/Lottery.sol:Raffle","label":"s_recentWinner","offset":0,"slot":"1","type":"t_address"},{"astId":478,"contract":"contracts/Lottery.sol:Raffle","label":"s_raffleState","offset":20,"slot":"1","type":"t_enum(RaffleState)453"},{"astId":480,"contract":"contracts/Lottery.sol:Raffle","label":"s_lastTimeStamp","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(RaffleState)453":{"encoding":"inplace","label":"enum Raffle.RaffleState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"This contract is for creating an untamparable decentralized smart contract","version":1}}}}}}